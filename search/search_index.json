{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>This project is an experimental python binding of the MMCore library using nanobind.</p> <p>See API documentation.</p>"},{"location":"api/","title":"pymmcore_nano","text":"<p>Module API</p>"},{"location":"api/#pymmcore_nano","title":"pymmcore_nano","text":"<p>Classes:</p> <ul> <li> <code>CMMCore</code>           \u2013            <p>The main MMCore object.</p> </li> <li> <code>Configuration</code>           \u2013            <p>Encapsulation of  configuration information.</p> </li> <li> <code>MMEventCallback</code>           \u2013            <p>Interface for receiving events from MMCore.</p> </li> <li> <code>Metadata</code>           \u2013            </li> <li> <code>MetadataArrayTag</code>           \u2013            </li> <li> <code>MetadataSingleTag</code>           \u2013            </li> <li> <code>MetadataTag</code>           \u2013            </li> <li> <code>PropertySetting</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>patch_pymmcore</code>             \u2013              <p>Add a meta path hook to redirect imports of <code>pymmcore</code> to <code>pymmcore_nano</code>.</p> </li> </ul>"},{"location":"api/#pymmcore_nano.CMMCore","title":"CMMCore","text":"<pre><code>CMMCore()\n</code></pre> <p>The main MMCore object.</p> <p>Manages multiple device adapters. Provides a device-independent interface for hardware control. Additionally, provides some facilities (such as configuration groups) for application programming.</p> <p>Methods:</p> <ul> <li> <code>addGalvoPolygonVertex</code>             \u2013              <p>Add a vertex to a galvo polygon.</p> </li> <li> <code>loadSystemConfiguration</code>             \u2013              <p>Loads a system configuration from a file.</p> </li> <li> <code>registerCallback</code>             \u2013              <p>Register a callback (listener class).</p> </li> </ul>"},{"location":"api/#pymmcore_nano.CMMCore.addGalvoPolygonVertex","title":"addGalvoPolygonVertex","text":"<pre><code>addGalvoPolygonVertex(\n    galvoLabel: str, polygonIndex: int, x: float, y: float\n) -&gt; None\n</code></pre> <p>Add a vertex to a galvo polygon.</p>"},{"location":"api/#pymmcore_nano.CMMCore.loadSystemConfiguration","title":"loadSystemConfiguration","text":"<pre><code>loadSystemConfiguration(fileName: object) -&gt; None\n</code></pre> <p>Loads a system configuration from a file.</p>"},{"location":"api/#pymmcore_nano.CMMCore.registerCallback","title":"registerCallback","text":"<pre><code>registerCallback(cb: MMEventCallback) -&gt; None\n</code></pre> <p>Register a callback (listener class).</p> <p>MMCore will send notifications on internal events using this interface</p>"},{"location":"api/#pymmcore_nano.Configuration","title":"Configuration","text":"<pre><code>Configuration()\n</code></pre> <p>Encapsulation of  configuration information.</p> <p>A configuration is a collection of device property settings.</p>"},{"location":"api/#pymmcore_nano.MMEventCallback","title":"MMEventCallback","text":"<pre><code>MMEventCallback()\n</code></pre> <p>Interface for receiving events from MMCore.</p> <p>Use by passing an instance to <code>CMMCore.registerCallback</code>.</p> <p>Methods:</p> <ul> <li> <code>onChannelGroupChanged</code>             \u2013              <p>Called when the channel group changes</p> </li> <li> <code>onConfigGroupChanged</code>             \u2013              <p>Called when a configuration group changes</p> </li> <li> <code>onPixelSizeAffineChanged</code>             \u2013              <p>Called when the pixel size affine transformation changes</p> </li> <li> <code>onPixelSizeChanged</code>             \u2013              <p>Called when the pixel size changes</p> </li> <li> <code>onPropertiesChanged</code>             \u2013              <p>Called when properties are changed</p> </li> <li> <code>onPropertyChanged</code>             \u2013              <p>Called when a specific property is changed</p> </li> <li> <code>onSystemConfigurationLoaded</code>             \u2013              <p>Called when the system configuration is loaded</p> </li> </ul>"},{"location":"api/#pymmcore_nano.MMEventCallback.onChannelGroupChanged","title":"onChannelGroupChanged","text":"<pre><code>onChannelGroupChanged(newChannelGroupName: str) -&gt; None\n</code></pre> <p>Called when the channel group changes</p>"},{"location":"api/#pymmcore_nano.MMEventCallback.onConfigGroupChanged","title":"onConfigGroupChanged","text":"<pre><code>onConfigGroupChanged(\n    groupName: str, newConfigName: str\n) -&gt; None\n</code></pre> <p>Called when a configuration group changes</p>"},{"location":"api/#pymmcore_nano.MMEventCallback.onPixelSizeAffineChanged","title":"onPixelSizeAffineChanged","text":"<pre><code>onPixelSizeAffineChanged(\n    v0: float,\n    v1: float,\n    v2: float,\n    v3: float,\n    v4: float,\n    v5: float,\n) -&gt; None\n</code></pre> <p>Called when the pixel size affine transformation changes</p>"},{"location":"api/#pymmcore_nano.MMEventCallback.onPixelSizeChanged","title":"onPixelSizeChanged","text":"<pre><code>onPixelSizeChanged(newPixelSizeUm: float) -&gt; None\n</code></pre> <p>Called when the pixel size changes</p>"},{"location":"api/#pymmcore_nano.MMEventCallback.onPropertiesChanged","title":"onPropertiesChanged","text":"<pre><code>onPropertiesChanged() -&gt; None\n</code></pre> <p>Called when properties are changed</p>"},{"location":"api/#pymmcore_nano.MMEventCallback.onPropertyChanged","title":"onPropertyChanged","text":"<pre><code>onPropertyChanged(\n    name: str, propName: str, propValue: str\n) -&gt; None\n</code></pre> <p>Called when a specific property is changed</p>"},{"location":"api/#pymmcore_nano.MMEventCallback.onSystemConfigurationLoaded","title":"onSystemConfigurationLoaded","text":"<pre><code>onSystemConfigurationLoaded() -&gt; None\n</code></pre> <p>Called when the system configuration is loaded</p>"},{"location":"api/#pymmcore_nano.Metadata","title":"Metadata","text":"<p>Methods:</p> <ul> <li> <code>Clear</code>             \u2013              <p>Clears all tags</p> </li> <li> <code>Dump</code>             \u2013              <p>Dumps metadata in human-readable format</p> </li> <li> <code>GetArrayTag</code>             \u2013              <p>Gets an array tag by key</p> </li> <li> <code>GetKeys</code>             \u2013              <p>Returns all tag keys</p> </li> <li> <code>GetSingleTag</code>             \u2013              <p>Gets a single tag by key</p> </li> <li> <code>HasTag</code>             \u2013              <p>Checks if a tag exists for the given key</p> </li> <li> <code>Merge</code>             \u2013              <p>Merges new tags into the metadata</p> </li> <li> <code>PutImageTag</code>             \u2013              <p>Adds an image tag</p> </li> <li> <code>PutTag</code>             \u2013              <p>Adds a MetadataSingleTag</p> </li> <li> <code>RemoveTag</code>             \u2013              <p>Removes a tag by key</p> </li> <li> <code>Restore</code>             \u2013              <p>Restores metadata from a serialized string</p> </li> <li> <code>Serialize</code>             \u2013              <p>Serializes the metadata</p> </li> <li> <code>SetTag</code>             \u2013              <p>Sets a tag</p> </li> </ul>"},{"location":"api/#pymmcore_nano.Metadata.Clear","title":"Clear","text":"<pre><code>Clear() -&gt; None\n</code></pre> <p>Clears all tags</p>"},{"location":"api/#pymmcore_nano.Metadata.Dump","title":"Dump","text":"<pre><code>Dump() -&gt; str\n</code></pre> <p>Dumps metadata in human-readable format</p>"},{"location":"api/#pymmcore_nano.Metadata.GetArrayTag","title":"GetArrayTag","text":"<pre><code>GetArrayTag(key: str) -&gt; MetadataArrayTag\n</code></pre> <p>Gets an array tag by key</p>"},{"location":"api/#pymmcore_nano.Metadata.GetKeys","title":"GetKeys","text":"<pre><code>GetKeys() -&gt; list[str]\n</code></pre> <p>Returns all tag keys</p>"},{"location":"api/#pymmcore_nano.Metadata.GetSingleTag","title":"GetSingleTag","text":"<pre><code>GetSingleTag(key: str) -&gt; MetadataSingleTag\n</code></pre> <p>Gets a single tag by key</p>"},{"location":"api/#pymmcore_nano.Metadata.HasTag","title":"HasTag","text":"<pre><code>HasTag(key: str) -&gt; bool\n</code></pre> <p>Checks if a tag exists for the given key</p>"},{"location":"api/#pymmcore_nano.Metadata.Merge","title":"Merge","text":"<pre><code>Merge(newTags: Metadata) -&gt; None\n</code></pre> <p>Merges new tags into the metadata</p>"},{"location":"api/#pymmcore_nano.Metadata.PutImageTag","title":"PutImageTag","text":"<pre><code>PutImageTag(key: str, value: str) -&gt; None\n</code></pre> <p>Adds an image tag</p>"},{"location":"api/#pymmcore_nano.Metadata.PutTag","title":"PutTag","text":"<pre><code>PutTag(key: str, deviceLabel: str, value: str) -&gt; None\n</code></pre> <p>Adds a MetadataSingleTag</p>"},{"location":"api/#pymmcore_nano.Metadata.RemoveTag","title":"RemoveTag","text":"<pre><code>RemoveTag(key: str) -&gt; None\n</code></pre> <p>Removes a tag by key</p>"},{"location":"api/#pymmcore_nano.Metadata.Restore","title":"Restore","text":"<pre><code>Restore(stream: str) -&gt; bool\n</code></pre> <p>Restores metadata from a serialized string</p>"},{"location":"api/#pymmcore_nano.Metadata.Serialize","title":"Serialize","text":"<pre><code>Serialize() -&gt; str\n</code></pre> <p>Serializes the metadata</p>"},{"location":"api/#pymmcore_nano.Metadata.SetTag","title":"SetTag","text":"<pre><code>SetTag(tag: MetadataTag) -&gt; None\n</code></pre> <p>Sets a tag</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag","title":"MetadataArrayTag","text":"<p>               Bases: <code>MetadataTag</code></p> <p>Methods:</p> <ul> <li> <code>AddValue</code>             \u2013              <p>Adds a value to the array</p> </li> <li> <code>Clone</code>             \u2013              <p>Clones this tag</p> </li> <li> <code>GetDevice</code>             \u2013              <p>Returns the device label</p> </li> <li> <code>GetName</code>             \u2013              <p>Returns the name of the tag</p> </li> <li> <code>GetQualifiedName</code>             \u2013              <p>Returns the qualified name</p> </li> <li> <code>GetSize</code>             \u2013              <p>Returns the size of the array</p> </li> <li> <code>GetValue</code>             \u2013              <p>Gets a value at a specific index</p> </li> <li> <code>IsReadOnly</code>             \u2013              <p>Checks if the tag is read-only</p> </li> <li> <code>Restore</code>             \u2013              <p>Restores from a serialized string</p> </li> <li> <code>Serialize</code>             \u2013              <p>Serializes this tag to a string</p> </li> <li> <code>SetDevice</code>             \u2013              <p>Sets the device label</p> </li> <li> <code>SetName</code>             \u2013              <p>Sets the name of the tag</p> </li> <li> <code>SetReadOnly</code>             \u2013              <p>Sets the read-only status</p> </li> <li> <code>SetValue</code>             \u2013              <p>Sets a value at a specific index</p> </li> <li> <code>ToArrayTag</code>             \u2013              <p>Returns this object as MetadataArrayTag</p> </li> <li> <code>ToSingleTag</code>             \u2013              <p>Converts to MetadataSingleTag if applicable</p> </li> </ul>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.AddValue","title":"AddValue","text":"<pre><code>AddValue(val: str) -&gt; None\n</code></pre> <p>Adds a value to the array</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.Clone","title":"Clone","text":"<pre><code>Clone() -&gt; MetadataTag\n</code></pre> <p>Clones this tag</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.GetDevice","title":"GetDevice","text":"<pre><code>GetDevice() -&gt; str\n</code></pre> <p>Returns the device label</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.GetName","title":"GetName","text":"<pre><code>GetName() -&gt; str\n</code></pre> <p>Returns the name of the tag</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.GetQualifiedName","title":"GetQualifiedName","text":"<pre><code>GetQualifiedName() -&gt; str\n</code></pre> <p>Returns the qualified name</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.GetSize","title":"GetSize","text":"<pre><code>GetSize() -&gt; int\n</code></pre> <p>Returns the size of the array</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.GetValue","title":"GetValue","text":"<pre><code>GetValue(idx: int) -&gt; str\n</code></pre> <p>Gets a value at a specific index</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.IsReadOnly","title":"IsReadOnly","text":"<pre><code>IsReadOnly() -&gt; bool\n</code></pre> <p>Checks if the tag is read-only</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.Restore","title":"Restore","text":"<pre><code>Restore(stream: str) -&gt; bool\n</code></pre> <p>Restores from a serialized string</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.Serialize","title":"Serialize","text":"<pre><code>Serialize() -&gt; str\n</code></pre> <p>Serializes this tag to a string</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.SetDevice","title":"SetDevice","text":"<pre><code>SetDevice(device: str) -&gt; None\n</code></pre> <p>Sets the device label</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.SetName","title":"SetName","text":"<pre><code>SetName(name: str) -&gt; None\n</code></pre> <p>Sets the name of the tag</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.SetReadOnly","title":"SetReadOnly","text":"<pre><code>SetReadOnly(readOnly: bool) -&gt; None\n</code></pre> <p>Sets the read-only status</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.SetValue","title":"SetValue","text":"<pre><code>SetValue(val: str, idx: int) -&gt; None\n</code></pre> <p>Sets a value at a specific index</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.ToArrayTag","title":"ToArrayTag","text":"<pre><code>ToArrayTag() -&gt; MetadataArrayTag\n</code></pre> <p>Returns this object as MetadataArrayTag</p>"},{"location":"api/#pymmcore_nano.MetadataArrayTag.ToSingleTag","title":"ToSingleTag","text":"<pre><code>ToSingleTag() -&gt; MetadataSingleTag\n</code></pre> <p>Converts to MetadataSingleTag if applicable</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag","title":"MetadataSingleTag","text":"<p>               Bases: <code>MetadataTag</code></p> <p>Methods:</p> <ul> <li> <code>Clone</code>             \u2013              <p>Clones this tag</p> </li> <li> <code>GetDevice</code>             \u2013              <p>Returns the device label</p> </li> <li> <code>GetName</code>             \u2013              <p>Returns the name of the tag</p> </li> <li> <code>GetQualifiedName</code>             \u2013              <p>Returns the qualified name</p> </li> <li> <code>GetValue</code>             \u2013              <p>Returns the value</p> </li> <li> <code>IsReadOnly</code>             \u2013              <p>Checks if the tag is read-only</p> </li> <li> <code>Restore</code>             \u2013              <p>Restores from a serialized string</p> </li> <li> <code>Serialize</code>             \u2013              <p>Serializes this tag to a string</p> </li> <li> <code>SetDevice</code>             \u2013              <p>Sets the device label</p> </li> <li> <code>SetName</code>             \u2013              <p>Sets the name of the tag</p> </li> <li> <code>SetReadOnly</code>             \u2013              <p>Sets the read-only status</p> </li> <li> <code>SetValue</code>             \u2013              <p>Sets the value</p> </li> <li> <code>ToArrayTag</code>             \u2013              <p>Converts to MetadataArrayTag if applicable</p> </li> <li> <code>ToSingleTag</code>             \u2013              <p>Returns this object as MetadataSingleTag</p> </li> </ul>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.Clone","title":"Clone","text":"<pre><code>Clone() -&gt; MetadataTag\n</code></pre> <p>Clones this tag</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.GetDevice","title":"GetDevice","text":"<pre><code>GetDevice() -&gt; str\n</code></pre> <p>Returns the device label</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.GetName","title":"GetName","text":"<pre><code>GetName() -&gt; str\n</code></pre> <p>Returns the name of the tag</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.GetQualifiedName","title":"GetQualifiedName","text":"<pre><code>GetQualifiedName() -&gt; str\n</code></pre> <p>Returns the qualified name</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.GetValue","title":"GetValue","text":"<pre><code>GetValue() -&gt; str\n</code></pre> <p>Returns the value</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.IsReadOnly","title":"IsReadOnly","text":"<pre><code>IsReadOnly() -&gt; bool\n</code></pre> <p>Checks if the tag is read-only</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.Restore","title":"Restore","text":"<pre><code>Restore(stream: str) -&gt; bool\n</code></pre> <p>Restores from a serialized string</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.Serialize","title":"Serialize","text":"<pre><code>Serialize() -&gt; str\n</code></pre> <p>Serializes this tag to a string</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.SetDevice","title":"SetDevice","text":"<pre><code>SetDevice(device: str) -&gt; None\n</code></pre> <p>Sets the device label</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.SetName","title":"SetName","text":"<pre><code>SetName(name: str) -&gt; None\n</code></pre> <p>Sets the name of the tag</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.SetReadOnly","title":"SetReadOnly","text":"<pre><code>SetReadOnly(readOnly: bool) -&gt; None\n</code></pre> <p>Sets the read-only status</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.SetValue","title":"SetValue","text":"<pre><code>SetValue(val: str) -&gt; None\n</code></pre> <p>Sets the value</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.ToArrayTag","title":"ToArrayTag","text":"<pre><code>ToArrayTag() -&gt; MetadataArrayTag\n</code></pre> <p>Converts to MetadataArrayTag if applicable</p>"},{"location":"api/#pymmcore_nano.MetadataSingleTag.ToSingleTag","title":"ToSingleTag","text":"<pre><code>ToSingleTag() -&gt; MetadataSingleTag\n</code></pre> <p>Returns this object as MetadataSingleTag</p>"},{"location":"api/#pymmcore_nano.MetadataTag","title":"MetadataTag","text":"<p>Methods:</p> <ul> <li> <code>Clone</code>             \u2013              <p>Creates a clone of the MetadataTag</p> </li> <li> <code>GetDevice</code>             \u2013              <p>Returns the device label</p> </li> <li> <code>GetName</code>             \u2013              <p>Returns the name of the tag</p> </li> <li> <code>GetQualifiedName</code>             \u2013              <p>Returns the qualified name</p> </li> <li> <code>IsReadOnly</code>             \u2013              <p>Checks if the tag is read-only</p> </li> <li> <code>Restore</code>             \u2013              <p>Restores from a serialized string</p> </li> <li> <code>Serialize</code>             \u2013              <p>Serializes the MetadataTag to a string</p> </li> <li> <code>SetDevice</code>             \u2013              <p>Sets the device label</p> </li> <li> <code>SetName</code>             \u2013              <p>Sets the name of the tag</p> </li> <li> <code>SetReadOnly</code>             \u2013              <p>Sets the read-only status</p> </li> <li> <code>ToArrayTag</code>             \u2013              <p>Converts to MetadataArrayTag if applicable</p> </li> <li> <code>ToSingleTag</code>             \u2013              <p>Converts to MetadataSingleTag if applicable</p> </li> </ul>"},{"location":"api/#pymmcore_nano.MetadataTag.Clone","title":"Clone","text":"<pre><code>Clone() -&gt; MetadataTag\n</code></pre> <p>Creates a clone of the MetadataTag</p>"},{"location":"api/#pymmcore_nano.MetadataTag.GetDevice","title":"GetDevice","text":"<pre><code>GetDevice() -&gt; str\n</code></pre> <p>Returns the device label</p>"},{"location":"api/#pymmcore_nano.MetadataTag.GetName","title":"GetName","text":"<pre><code>GetName() -&gt; str\n</code></pre> <p>Returns the name of the tag</p>"},{"location":"api/#pymmcore_nano.MetadataTag.GetQualifiedName","title":"GetQualifiedName","text":"<pre><code>GetQualifiedName() -&gt; str\n</code></pre> <p>Returns the qualified name</p>"},{"location":"api/#pymmcore_nano.MetadataTag.IsReadOnly","title":"IsReadOnly","text":"<pre><code>IsReadOnly() -&gt; bool\n</code></pre> <p>Checks if the tag is read-only</p>"},{"location":"api/#pymmcore_nano.MetadataTag.Restore","title":"Restore","text":"<pre><code>Restore(stream: str) -&gt; bool\n</code></pre> <p>Restores from a serialized string</p>"},{"location":"api/#pymmcore_nano.MetadataTag.Serialize","title":"Serialize","text":"<pre><code>Serialize() -&gt; str\n</code></pre> <p>Serializes the MetadataTag to a string</p>"},{"location":"api/#pymmcore_nano.MetadataTag.SetDevice","title":"SetDevice","text":"<pre><code>SetDevice(device: str) -&gt; None\n</code></pre> <p>Sets the device label</p>"},{"location":"api/#pymmcore_nano.MetadataTag.SetName","title":"SetName","text":"<pre><code>SetName(name: str) -&gt; None\n</code></pre> <p>Sets the name of the tag</p>"},{"location":"api/#pymmcore_nano.MetadataTag.SetReadOnly","title":"SetReadOnly","text":"<pre><code>SetReadOnly(readOnly: bool) -&gt; None\n</code></pre> <p>Sets the read-only status</p>"},{"location":"api/#pymmcore_nano.MetadataTag.ToArrayTag","title":"ToArrayTag","text":"<pre><code>ToArrayTag() -&gt; MetadataArrayTag\n</code></pre> <p>Converts to MetadataArrayTag if applicable</p>"},{"location":"api/#pymmcore_nano.MetadataTag.ToSingleTag","title":"ToSingleTag","text":"<pre><code>ToSingleTag() -&gt; MetadataSingleTag\n</code></pre> <p>Converts to MetadataSingleTag if applicable</p>"},{"location":"api/#pymmcore_nano.PropertySetting","title":"PropertySetting","text":"<p>Methods:</p> <ul> <li> <code>generateKey</code>             \u2013              <p>Generates a unique key based on device and property</p> </li> <li> <code>getDeviceLabel</code>             \u2013              <p>Returns the device label</p> </li> <li> <code>getKey</code>             \u2013              <p>Returns the unique key</p> </li> <li> <code>getPropertyName</code>             \u2013              <p>Returns the property name</p> </li> <li> <code>getPropertyValue</code>             \u2013              <p>Returns the property value</p> </li> <li> <code>getReadOnly</code>             \u2013              <p>Returns the read-only status</p> </li> <li> <code>getVerbose</code>             \u2013              <p>Returns a verbose description</p> </li> <li> <code>isEqualTo</code>             \u2013              <p>Checks if this property setting is equal to another</p> </li> </ul>"},{"location":"api/#pymmcore_nano.PropertySetting.generateKey","title":"generateKey  <code>staticmethod</code>","text":"<pre><code>generateKey(device: str, prop: str) -&gt; str\n</code></pre> <p>Generates a unique key based on device and property</p>"},{"location":"api/#pymmcore_nano.PropertySetting.getDeviceLabel","title":"getDeviceLabel","text":"<pre><code>getDeviceLabel() -&gt; str\n</code></pre> <p>Returns the device label</p>"},{"location":"api/#pymmcore_nano.PropertySetting.getKey","title":"getKey","text":"<pre><code>getKey() -&gt; str\n</code></pre> <p>Returns the unique key</p>"},{"location":"api/#pymmcore_nano.PropertySetting.getPropertyName","title":"getPropertyName","text":"<pre><code>getPropertyName() -&gt; str\n</code></pre> <p>Returns the property name</p>"},{"location":"api/#pymmcore_nano.PropertySetting.getPropertyValue","title":"getPropertyValue","text":"<pre><code>getPropertyValue() -&gt; str\n</code></pre> <p>Returns the property value</p>"},{"location":"api/#pymmcore_nano.PropertySetting.getReadOnly","title":"getReadOnly","text":"<pre><code>getReadOnly() -&gt; bool\n</code></pre> <p>Returns the read-only status</p>"},{"location":"api/#pymmcore_nano.PropertySetting.getVerbose","title":"getVerbose","text":"<pre><code>getVerbose() -&gt; str\n</code></pre> <p>Returns a verbose description</p>"},{"location":"api/#pymmcore_nano.PropertySetting.isEqualTo","title":"isEqualTo","text":"<pre><code>isEqualTo(other: PropertySetting) -&gt; bool\n</code></pre> <p>Checks if this property setting is equal to another</p>"},{"location":"api/#pymmcore_nano.patch_pymmcore","title":"patch_pymmcore","text":"<pre><code>patch_pymmcore()\n</code></pre> <p>Add a meta path hook to redirect imports of <code>pymmcore</code> to <code>pymmcore_nano</code>.</p>"}]}