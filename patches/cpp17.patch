diff --git a/MMCore/CircularBuffer.cpp b/MMCore/CircularBuffer.cpp
index e23ea89b..3efb6494 100644
--- a/MMCore/CircularBuffer.cpp
+++ b/MMCore/CircularBuffer.cpp
@@ -194,7 +194,7 @@ static std::string FormatLocalTime(std::chrono::time_point<std::chrono::system_c
 /**
 * Inserts a single image in the buffer.
 */
-bool CircularBuffer::InsertImage(const unsigned char* pixArray, unsigned int width, unsigned int height, unsigned int byteDepth, const Metadata* pMd) throw (CMMError)
+bool CircularBuffer::InsertImage(const unsigned char* pixArray, unsigned int width, unsigned int height, unsigned int byteDepth, const Metadata* pMd) noexcept(false)
 {
    return InsertMultiChannel(pixArray, 1, width, height, byteDepth, pMd);
 }
@@ -202,7 +202,7 @@ bool CircularBuffer::InsertImage(const unsigned char* pixArray, unsigned int wid
 /**
 * Inserts a single image, possibly with multiple channels, but with 1 component, in the buffer.
 */
-bool CircularBuffer::InsertMultiChannel(const unsigned char* pixArray, unsigned int numChannels, unsigned int width, unsigned int height, unsigned int byteDepth, const Metadata* pMd) throw (CMMError)
+bool CircularBuffer::InsertMultiChannel(const unsigned char* pixArray, unsigned int numChannels, unsigned int width, unsigned int height, unsigned int byteDepth, const Metadata* pMd) noexcept(false)
 {
    return InsertMultiChannel(pixArray, numChannels, width, height, byteDepth, 1, pMd);
 }
@@ -210,7 +210,7 @@ bool CircularBuffer::InsertMultiChannel(const unsigned char* pixArray, unsigned
 /**
 * Inserts a single image, possibly with multiple components, in the buffer.
 */
-bool CircularBuffer::InsertImage(const unsigned char* pixArray, unsigned int width, unsigned int height, unsigned int byteDepth, unsigned int nComponents, const Metadata* pMd) throw (CMMError)
+bool CircularBuffer::InsertImage(const unsigned char* pixArray, unsigned int width, unsigned int height, unsigned int byteDepth, unsigned int nComponents, const Metadata* pMd) noexcept(false)
 {
     return InsertMultiChannel(pixArray, 1, width, height, byteDepth, nComponents, pMd);
 }
@@ -218,7 +218,7 @@ bool CircularBuffer::InsertImage(const unsigned char* pixArray, unsigned int wid
 /**
 * Inserts a multi-channel frame in the buffer.
 */
-bool CircularBuffer::InsertMultiChannel(const unsigned char* pixArray, unsigned int numChannels, unsigned int width, unsigned int height, unsigned int byteDepth, unsigned int nComponents, const Metadata* pMd) throw (CMMError)
+bool CircularBuffer::InsertMultiChannel(const unsigned char* pixArray, unsigned int numChannels, unsigned int width, unsigned int height, unsigned int byteDepth, unsigned int nComponents, const Metadata* pMd) noexcept(false)
 {
     MMThreadGuard insertGuard(g_insertLock);
  
diff --git a/MMCore/CircularBuffer.h b/MMCore/CircularBuffer.h
index 636c02ce..a8b5c726 100644
--- a/MMCore/CircularBuffer.h
+++ b/MMCore/CircularBuffer.h
@@ -66,10 +66,10 @@ public:
    unsigned int Height() const {MMThreadGuard guard(g_bufferLock); return height_;}
    unsigned int Depth() const {MMThreadGuard guard(g_bufferLock); return pixDepth_;}
 
-   bool InsertImage(const unsigned char* pixArray, unsigned int width, unsigned int height, unsigned int byteDepth, const Metadata* pMd) throw (CMMError);
-   bool InsertMultiChannel(const unsigned char* pixArray, unsigned int numChannels, unsigned int width, unsigned int height, unsigned int byteDepth, const Metadata* pMd) throw (CMMError);
-   bool InsertImage(const unsigned char* pixArray, unsigned int width, unsigned int height, unsigned int byteDepth, unsigned int nComponents, const Metadata* pMd) throw (CMMError);
-   bool InsertMultiChannel(const unsigned char* pixArray, unsigned int numChannels, unsigned int width, unsigned int height, unsigned int byteDepth, unsigned int nComponents, const Metadata* pMd) throw (CMMError);
+   bool InsertImage(const unsigned char* pixArray, unsigned int width, unsigned int height, unsigned int byteDepth, const Metadata* pMd) noexcept(false);
+   bool InsertMultiChannel(const unsigned char* pixArray, unsigned int numChannels, unsigned int width, unsigned int height, unsigned int byteDepth, const Metadata* pMd) noexcept(false);
+   bool InsertImage(const unsigned char* pixArray, unsigned int width, unsigned int height, unsigned int byteDepth, unsigned int nComponents, const Metadata* pMd) noexcept(false);
+   bool InsertMultiChannel(const unsigned char* pixArray, unsigned int numChannels, unsigned int width, unsigned int height, unsigned int byteDepth, unsigned int nComponents, const Metadata* pMd) noexcept(false);
    const unsigned char* GetTopImage() const;
    const unsigned char* GetNextImage();
    const mm::ImgBuffer* GetTopImageBuffer(unsigned channel) const;
diff --git a/MMCore/ConfigGroup.h b/MMCore/ConfigGroup.h
index a5b7d41b..7190f050 100644
--- a/MMCore/ConfigGroup.h
+++ b/MMCore/ConfigGroup.h
@@ -401,7 +401,7 @@ public:
 
    void setPixelSizeUm(double pixSize) {pixelSizeUm_ = pixSize;}
    double getPixelSizeUm() const {return pixelSizeUm_;}
-   void setPixelConfigAffineMatrix(std::vector<double> &affineMatrix) throw (CMMError)
+   void setPixelConfigAffineMatrix(std::vector<double> &affineMatrix) noexcept(false)
    { 
       if (affineMatrix.size() != 6) 
       {
diff --git a/MMCore/Configuration.cpp b/MMCore/Configuration.cpp
index acd2df82..68c8d11d 100644
--- a/MMCore/Configuration.cpp
+++ b/MMCore/Configuration.cpp
@@ -83,7 +83,7 @@ std::string Configuration::getVerbose() const
 /**
  * Returns the setting with specified index.
  */
-PropertySetting Configuration::getSetting(size_t index) const throw (CMMError)
+PropertySetting Configuration::getSetting(size_t index) const noexcept(false)
 {
    if (index >= settings_.size())
    {
diff --git a/MMCore/Configuration.h b/MMCore/Configuration.h
index 16a2b775..fa983da1 100644
--- a/MMCore/Configuration.h
+++ b/MMCore/Configuration.h
@@ -111,7 +111,7 @@ public:
    bool isSettingIncluded(const PropertySetting& ps);
    bool isConfigurationIncluded(const Configuration& cfg);
 
-   PropertySetting getSetting(size_t index) const throw (CMMError);
+   PropertySetting getSetting(size_t index) const noexcept(false);
    PropertySetting getSetting(const char* device, const char* prop);
    
    /**
diff --git a/MMCore/MMCore.cpp b/MMCore/MMCore.cpp
index 7735b525..989a4e64 100644
--- a/MMCore/MMCore.cpp
+++ b/MMCore/MMCore.cpp
@@ -219,7 +219,7 @@ CMMCore::~CMMCore()
  * disable a permanently enabled feature, or attempting to enable a permanently
  * disabled feature.
  */
-void CMMCore::enableFeature(const char* name, bool enable) throw (CMMError)
+void CMMCore::enableFeature(const char* name, bool enable) noexcept(false)
 {
     if (name == nullptr)
         throw CMMError("Null feature name", MMERR_NullPointerException);
@@ -236,7 +236,7 @@ void CMMCore::enableFeature(const char* name, bool enable) throw (CMMError)
  *
  * @throws CMMError if the feature name is null or unknown.
  */
-bool CMMCore::isFeatureEnabled(const char* name) throw (CMMError)
+bool CMMCore::isFeatureEnabled(const char* name) noexcept(false)
 {
     if (name == nullptr)
         throw CMMError("Null feature name", MMERR_NullPointerException);
@@ -249,7 +249,7 @@ bool CMMCore::isFeatureEnabled(const char* name) throw (CMMError)
  * @param filename The log filename. If empty or null, the primary log file is
  * disabled.
  */
-void CMMCore::setPrimaryLogFile(const char* filename, bool truncate) throw (CMMError)
+void CMMCore::setPrimaryLogFile(const char* filename, bool truncate) noexcept(false)
 {
    std::string filenameStr;
    if (filename)
@@ -335,7 +335,7 @@ bool CMMCore::stderrLogEnabled()
  * @returns A handle required when calling stopSecondaryLogFile().
  */
 int CMMCore::startSecondaryLogFile(const char* filename, bool enableDebug,
-      bool truncate, bool synchronous) throw (CMMError)
+      bool truncate, bool synchronous) noexcept(false)
 {
    if (!filename)
       throw CMMError("Filename is null");
@@ -356,7 +356,7 @@ int CMMCore::startSecondaryLogFile(const char* filename, bool enableDebug,
  *
  * @param handle The secondary log handle returned by startSecondaryLogFile().
  */
-void CMMCore::stopSecondaryLogFile(int handle) throw (CMMError)
+void CMMCore::stopSecondaryLogFile(int handle) noexcept(false)
 {
    typedef mm::LogManager::LogFileHandle LogFileHandle;
    LogFileHandle h = static_cast<LogFileHandle>(handle);
@@ -378,7 +378,7 @@ std::string CMMCore::getVersionInfo() const
  * Get available devices from the specified device library.
  */
 std::vector<std::string>
-CMMCore::getAvailableDevices(const char* moduleName) throw (CMMError)
+CMMCore::getAvailableDevices(const char* moduleName) noexcept(false)
 {
    std::shared_ptr<LoadedDeviceAdapter> module =
       pluginManager_->GetDeviceAdapter(moduleName);
@@ -389,7 +389,7 @@ CMMCore::getAvailableDevices(const char* moduleName) throw (CMMError)
  * Get descriptions for available devices from the specified library.
  */
 std::vector<std::string>
-CMMCore::getAvailableDeviceDescriptions(const char* moduleName) throw (CMMError)
+CMMCore::getAvailableDeviceDescriptions(const char* moduleName) noexcept(false)
 {
    // XXX It is a little silly that we return the list of descriptions, rather
    // than provide access to the description of each device.
@@ -410,7 +410,7 @@ CMMCore::getAvailableDeviceDescriptions(const char* moduleName) throw (CMMError)
  * Get type information for available devices from the specified library.
  */
 std::vector<long>
-CMMCore::getAvailableDeviceTypes(const char* moduleName) throw (CMMError)
+CMMCore::getAvailableDeviceTypes(const char* moduleName) noexcept(false)
 {
    // XXX It is a little silly that we return the list of types, rather than
    // provide access to the type of each device.
@@ -511,7 +511,7 @@ Configuration CMMCore::getSystemStateCache() const
  * Returns a partial state of the system, only for devices included in the
  * specified configuration.
  */
-Configuration CMMCore::getConfigState(const char* group, const char* config) throw (CMMError)
+Configuration CMMCore::getConfigState(const char* group, const char* config) noexcept(false)
 {
    Configuration cfgData = getConfigData(group, config);
 
@@ -531,7 +531,7 @@ Configuration CMMCore::getConfigState(const char* group, const char* config) thr
  * Returns the partial state of the system, only for the devices included in the
  * specified group. It will create a union of all devices referenced in a group.
  */
-Configuration CMMCore::getConfigGroupState(const char* group) throw (CMMError)
+Configuration CMMCore::getConfigGroupState(const char* group) noexcept(false)
 {
    return getConfigGroupState(group, false);
 }
@@ -540,7 +540,7 @@ Configuration CMMCore::getConfigGroupState(const char* group) throw (CMMError)
  * Returns the partial state of the system cache, only for the devices included in the
  * specified group. It will create a union of all devices referenced in a group.
  */
-Configuration CMMCore::getConfigGroupStateFromCache(const char* group) throw (CMMError)
+Configuration CMMCore::getConfigGroupStateFromCache(const char* group) noexcept(false)
 {
    return getConfigGroupState(group, true);
 }
@@ -549,7 +549,7 @@ Configuration CMMCore::getConfigGroupStateFromCache(const char* group) throw (CM
  * Returns the partial state of the system, only for the devices included in the
  * specified group. It will create a union of all devices referenced in a group.
  */
-Configuration CMMCore::getConfigGroupState(const char* group, bool fromCache) throw (CMMError)
+Configuration CMMCore::getConfigGroupState(const char* group, bool fromCache) noexcept(false)
 {
    CheckConfigGroupName(group);
 
@@ -658,7 +658,7 @@ void CMMCore::setDeviceAdapterSearchPaths(const std::vector<std::string>& paths)
  * search paths. This method does not check whether the files are valid and
  * compatible device adapters.
  */
-std::vector<std::string> CMMCore::getDeviceAdapterNames() throw (CMMError)
+std::vector<std::string> CMMCore::getDeviceAdapterNames() noexcept(false)
 {
    return pluginManager_->GetAvailableDeviceAdapters();
 }
@@ -670,7 +670,7 @@ std::vector<std::string> CMMCore::getDeviceAdapterNames() throw (CMMError)
  * @param deviceName   the name of the device. The name must correspond to one of the names recognized
  *                 by the specific plugin library.
  */
-void CMMCore::loadDevice(const char* label, const char* moduleName, const char* deviceName) throw (CMMError)
+void CMMCore::loadDevice(const char* label, const char* moduleName, const char* deviceName) noexcept(false)
 {
    CheckDeviceLabel(label);
    if (!moduleName)
@@ -764,7 +764,7 @@ void CMMCore::assignDefaultRole(std::shared_ptr<DeviceInstance> pDevice)
  * Unloads the device from the core and adjusts all configuration data.
  */
 void CMMCore::unloadDevice(const char* label///< the name of the device to unload
-                           ) throw (CMMError)
+                           ) noexcept(false)
 {
    std::shared_ptr<DeviceInstance> pDevice = deviceManager_->GetDevice(label);
 
@@ -784,7 +784,7 @@ void CMMCore::unloadDevice(const char* label///< the name of the device to unloa
 /**
  * Unloads all devices from the core and resets all configuration data.
  */
-void CMMCore::unloadAllDevices() throw (CMMError)
+void CMMCore::unloadAllDevices() noexcept(false)
 {
    try {
       configGroups_->Clear();
@@ -818,7 +818,7 @@ void CMMCore::unloadAllDevices() throw (CMMError)
 /**
  * Unloads all devices from the core, clears all configuration data.
  */
-void CMMCore::reset() throw (CMMError)
+void CMMCore::reset() noexcept(false)
 {
    try
    {
@@ -853,7 +853,7 @@ void CMMCore::reset() throw (CMMError)
  * Calls Initialize() method for each loaded device.
  * Parallel implemnetation should be faster
  */
-void CMMCore::initializeAllDevices() throw (CMMError)
+void CMMCore::initializeAllDevices() noexcept(false)
 {
    if (this->isFeatureEnabled("ParallelDeviceInitialization"))
    {
@@ -871,7 +871,7 @@ void CMMCore::initializeAllDevices() throw (CMMError)
  * This method also initialized allowed values for core properties, based
  * on the collection of loaded devices.
  */
-void CMMCore::initializeAllDevicesSerial() throw (CMMError)
+void CMMCore::initializeAllDevicesSerial() noexcept(false)
 {
    std::vector<std::string> devices = deviceManager_->GetDeviceList();
    LOG_INFO(coreLogger_) << "Will initialize " << devices.size() << " devices";
@@ -906,7 +906,7 @@ void CMMCore::initializeAllDevicesSerial() throw (CMMError)
  * This method also initializes allowed values for core properties, based
  * on the collection of loaded devices.
  */
-void CMMCore::initializeAllDevicesParallel() throw (CMMError)
+void CMMCore::initializeAllDevicesParallel() noexcept(false)
 {
    std::vector<std::string> devices = deviceManager_->GetDeviceList();
    LOG_INFO(coreLogger_) << "Will initialize " << devices.size() << " devices";
@@ -1033,7 +1033,7 @@ int CMMCore::initializeVectorOfDevices(std::vector<std::pair<std::shared_ptr<Dev
  * will be populated with the currently loaded devices 
  * of that type
  */
-void CMMCore::updateCoreProperties() throw (CMMError)
+void CMMCore::updateCoreProperties() noexcept(false)
 {
    updateCoreProperty(MM::g_Keyword_CoreCamera, MM::CameraDevice);
    updateCoreProperty(MM::g_Keyword_CoreShutter, MM::ShutterDevice);
@@ -1047,7 +1047,7 @@ void CMMCore::updateCoreProperties() throw (CMMError)
    properties_->Refresh();
 }
 
-void CMMCore::updateCoreProperty(const char* propName, MM::DeviceType devType) throw (CMMError)
+void CMMCore::updateCoreProperty(const char* propName, MM::DeviceType devType) noexcept(false)
 {
    CheckPropertyName(propName);
 
@@ -1064,7 +1064,7 @@ void CMMCore::updateCoreProperty(const char* propName, MM::DeviceType devType) t
  * @param label   the device label
  */
 void CMMCore::initializeDevice(const char* label ///< the device to initialize
-                               ) throw (CMMError)
+                               ) noexcept(false)
 {
    std::shared_ptr<DeviceInstance> pDevice = deviceManager_->GetDevice(label);
 
@@ -1084,7 +1084,7 @@ void CMMCore::initializeDevice(const char* label ///< the device to initialize
  * @param label the device label
  */
 DeviceInitializationState
-CMMCore::getDeviceInitializationState(const char* label) const throw (CMMError)
+CMMCore::getDeviceInitializationState(const char* label) const noexcept(false)
 {
    std::shared_ptr<DeviceInstance> pDevice = deviceManager_->GetDevice(label);
 
@@ -1119,7 +1119,7 @@ void CMMCore::updateSystemStateCache()
 /**
  * Returns device type.
  */
-MM::DeviceType CMMCore::getDeviceType(const char* label) throw (CMMError)
+MM::DeviceType CMMCore::getDeviceType(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return MM::CoreDevice;
@@ -1132,7 +1132,7 @@ MM::DeviceType CMMCore::getDeviceType(const char* label) throw (CMMError)
 /**
  * Returns device library (aka module, device adapter) name.
  */
-std::string CMMCore::getDeviceLibrary(const char* label) throw (CMMError)
+std::string CMMCore::getDeviceLibrary(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return "";
@@ -1146,7 +1146,7 @@ std::string CMMCore::getDeviceLibrary(const char* label) throw (CMMError)
 /**
  * Forcefully unload a library. Experimental. Don't use.
  */
-void CMMCore::unloadLibrary(const char* moduleName) throw (CMMError)
+void CMMCore::unloadLibrary(const char* moduleName) noexcept(false)
 {
   	if (moduleName == 0)
       throw CMMError(errorText_[MMERR_NullPointerException],  MMERR_NullPointerException);
@@ -1180,7 +1180,7 @@ void CMMCore::unloadLibrary(const char* moduleName) throw (CMMError)
  * "Name" is determined by the library and is immutable, while "label" is
  * user assigned and represents a high-level handle to a device.
  */
-std::string CMMCore::getDeviceName(const char* label) throw (CMMError)
+std::string CMMCore::getDeviceName(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return "Core";
@@ -1193,7 +1193,7 @@ std::string CMMCore::getDeviceName(const char* label) throw (CMMError)
 /**
  * Returns parent device.
  */
-std::string CMMCore::getParentLabel(const char* label) throw (CMMError)
+std::string CMMCore::getParentLabel(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       // XXX Should be a throw
@@ -1206,7 +1206,7 @@ std::string CMMCore::getParentLabel(const char* label) throw (CMMError)
 /**
  * Sets parent device label
  */
-void CMMCore::setParentLabel(const char* label, const char* parentLabel) throw (CMMError)
+void CMMCore::setParentLabel(const char* label, const char* parentLabel) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       // XXX Should be a throw
@@ -1230,7 +1230,7 @@ void CMMCore::setParentLabel(const char* label, const char* parentLabel) throw (
  * Returns description text for a given device label.
  * "Description" is determined by the library and is immutable.
  */
-std::string CMMCore::getDeviceDescription(const char* label) throw (CMMError)
+std::string CMMCore::getDeviceDescription(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return "Core device";
@@ -1252,7 +1252,7 @@ std::string CMMCore::getDeviceDescription(const char* label) throw (CMMError)
  * @return the delay time in milliseconds
  * @param label    the device label
  */
-double CMMCore::getDeviceDelayMs(const char* label) throw (CMMError)
+double CMMCore::getDeviceDelayMs(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return 0.0;
@@ -1270,7 +1270,7 @@ double CMMCore::getDeviceDelayMs(const char* label) throw (CMMError)
  * @param label      the device label
  * @param delayMs    the desired delay in milliseconds
  */
-void CMMCore::setDeviceDelayMs(const char* label, double delayMs) throw (CMMError)
+void CMMCore::setDeviceDelayMs(const char* label, double delayMs) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return; // ignore
@@ -1286,7 +1286,7 @@ void CMMCore::setDeviceDelayMs(const char* label, double delayMs) throw (CMMErro
  * @param label    the device label
  * @return true if the device uses a delay
  */
-bool CMMCore::usesDeviceDelay(const char* label) throw (CMMError)
+bool CMMCore::usesDeviceDelay(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return false;
@@ -1301,7 +1301,7 @@ bool CMMCore::usesDeviceDelay(const char* label) throw (CMMError)
  * @param label the device label
  * @return true if the device is busy
  */
-bool CMMCore::deviceBusy(const char* label) throw (CMMError)
+bool CMMCore::deviceBusy(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return false;
@@ -1327,7 +1327,7 @@ void CMMCore::sleep(double intervalMs) const
  * non-busy.
  * @param label   the device label
  */
-void CMMCore::waitForDevice(const char* label) throw (CMMError)
+void CMMCore::waitForDevice(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return; // core property commands always block - no need to poll
@@ -1341,7 +1341,7 @@ void CMMCore::waitForDevice(const char* label) throw (CMMError)
  * Waits (blocks the calling thread) until the specified device becomes
  * @param device   the device label
  */
-void CMMCore::waitForDevice(std::shared_ptr<DeviceInstance> pDev) throw (CMMError)
+void CMMCore::waitForDevice(std::shared_ptr<DeviceInstance> pDev) noexcept(false)
 {
    LOG_DEBUG(coreLogger_) << "Waiting for device " << pDev->GetLabel() << "...";
 
@@ -1380,7 +1380,7 @@ void CMMCore::waitForDevice(std::shared_ptr<DeviceInstance> pDev) throw (CMMErro
  * of the devices is busy.
  * @return status (true on busy)
  */
-bool CMMCore::systemBusy() throw (CMMError)
+bool CMMCore::systemBusy() noexcept(false)
 {
    return deviceTypeBusy(MM::AnyType);
 }
@@ -1389,7 +1389,7 @@ bool CMMCore::systemBusy() throw (CMMError)
 /**
  * Blocks until all devices in the system become ready (not-busy).
  */
-void CMMCore::waitForSystem() throw (CMMError)
+void CMMCore::waitForSystem() noexcept(false)
 {
    waitForDeviceType(MM::AnyType);
 }
@@ -1402,7 +1402,7 @@ void CMMCore::waitForSystem() throw (CMMError)
  * @return true on busy
  * @param devType   a constant specifying the device type
  */
-bool CMMCore::deviceTypeBusy(MM::DeviceType devType) throw (CMMError)
+bool CMMCore::deviceTypeBusy(MM::DeviceType devType) noexcept(false)
 {
    std::vector<std::string> devices = deviceManager_->GetDeviceList(devType);
    for (size_t i=0; i<devices.size(); i++)
@@ -1427,7 +1427,7 @@ bool CMMCore::deviceTypeBusy(MM::DeviceType devType) throw (CMMError)
  * Blocks until all devices of the specific type become ready (not-busy).
  * @param devType    a constant specifying the device type
  */
-void CMMCore::waitForDeviceType(MM::DeviceType devType) throw (CMMError)
+void CMMCore::waitForDeviceType(MM::DeviceType devType) noexcept(false)
 {
    std::vector<std::string> devices = deviceManager_->GetDeviceList(devType);
    for (size_t i=0; i<devices.size(); i++)
@@ -1439,7 +1439,7 @@ void CMMCore::waitForDeviceType(MM::DeviceType devType) throw (CMMError)
  * @param group      the configuration group
  * @param config     the configuration preset
  */
-void CMMCore::waitForConfig(const char* group, const char* configName) throw (CMMError)
+void CMMCore::waitForConfig(const char* group, const char* configName) noexcept(false)
 {
    CheckConfigGroupName(group);
    CheckConfigPresetName(configName);
@@ -1459,7 +1459,7 @@ void CMMCore::waitForConfig(const char* group, const char* configName) throw (CM
  * @param label     the stage device label
  * @param position  the desired stage position, in microns
  */
-void CMMCore::setPosition(const char* label, double position) throw (CMMError)
+void CMMCore::setPosition(const char* label, double position) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -1481,7 +1481,7 @@ void CMMCore::setPosition(const char* label, double position) throw (CMMError)
  * (focus) device.
  * @param position  the desired stage position, in microns
  */
-void CMMCore::setPosition(double position) throw (CMMError)
+void CMMCore::setPosition(double position) noexcept(false)
 {
     setPosition(getFocusDevice().c_str(), position);
 }
@@ -1491,7 +1491,7 @@ void CMMCore::setPosition(double position) throw (CMMError)
  * @param label    the single-axis drive device label
  * @param d        the amount to move the stage, in microns (positive or negative)
  */
-void CMMCore::setRelativePosition(const char* label, double d) throw (CMMError)
+void CMMCore::setRelativePosition(const char* label, double d) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -1514,7 +1514,7 @@ void CMMCore::setRelativePosition(const char* label, double d) throw (CMMError)
  * positioner (focus) device.
  * @param d        the amount to move the stage, in microns (positive or negative)
  */
-void CMMCore::setRelativePosition(double d) throw (CMMError)
+void CMMCore::setRelativePosition(double d) noexcept(false)
 {
     setRelativePosition(getFocusDevice().c_str(), d);
 }
@@ -1524,7 +1524,7 @@ void CMMCore::setRelativePosition(double d) throw (CMMError)
  * @return the position in microns
  * @param label     the single-axis drive device label
  */
-double CMMCore::getPosition(const char* label) throw (CMMError)
+double CMMCore::getPosition(const char* label) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -1545,7 +1545,7 @@ double CMMCore::getPosition(const char* label) throw (CMMError)
  * Z positioner (focus) device.
  * @return the position in microns
  */
-double CMMCore::getPosition() throw (CMMError)
+double CMMCore::getPosition() noexcept(false)
 {
     return getPosition(getFocusDevice().c_str());
 }
@@ -1556,7 +1556,7 @@ double CMMCore::getPosition() throw (CMMError)
  * @param x      the X axis position in microns
  * @param y      the Y axis position in microns
  */
-void CMMCore::setXYPosition(const char* label, double x, double y) throw (CMMError)
+void CMMCore::setXYPosition(const char* label, double x, double y) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -1580,7 +1580,7 @@ void CMMCore::setXYPosition(const char* label, double x, double y) throw (CMMErr
  * @param x      the X axis position in microns
  * @param y      the Y axis position in microns
  */
-void CMMCore::setXYPosition(double x, double y) throw (CMMError)
+void CMMCore::setXYPosition(double x, double y) noexcept(false)
 {
     setXYPosition(getXYStageDevice().c_str(), x, y);
 }
@@ -1591,7 +1591,7 @@ void CMMCore::setXYPosition(double x, double y) throw (CMMError)
  * @param dx     the distance to move in X (positive or negative)
  * @param dy     the distance to move in Y (positive or negative)
  */
-void CMMCore::setRelativeXYPosition(const char* label, double dx, double dy) throw (CMMError)
+void CMMCore::setRelativeXYPosition(const char* label, double dx, double dy) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -1615,7 +1615,7 @@ void CMMCore::setRelativeXYPosition(const char* label, double dx, double dy) thr
  * @param dx     the distance to move in X (positive or negative)
  * @param dy     the distance to move in Y (positive or negative)
  */
-void CMMCore::setRelativeXYPosition(double dx, double dy) throw (CMMError) {
+void CMMCore::setRelativeXYPosition(double dx, double dy) noexcept(false) {
     setRelativeXYPosition(getXYStageDevice().c_str(), dx, dy);
 }
 
@@ -1625,7 +1625,7 @@ void CMMCore::setRelativeXYPosition(double dx, double dy) throw (CMMError) {
  * @param x            a return parameter yielding the X position in microns
  * @param y            a return parameter yielding the Y position in microns
  */
-void CMMCore::getXYPosition(const char* label, double& x, double& y) throw (CMMError)
+void CMMCore::getXYPosition(const char* label, double& x, double& y) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -1645,7 +1645,7 @@ void CMMCore::getXYPosition(const char* label, double& x, double& y) throw (CMME
  * @param x            a return parameter yielding the X position in microns
  * @param y            a return parameter yielding the Y position in microns
  */
-void CMMCore::getXYPosition(double& x, double& y) throw (CMMError)
+void CMMCore::getXYPosition(double& x, double& y) noexcept(false)
 {
     getXYPosition(getXYStageDevice().c_str(), x, y);
 }
@@ -1655,7 +1655,7 @@ void CMMCore::getXYPosition(double& x, double& y) throw (CMMError)
  * @return    the x position
  * @param  label   the stage device label
  */
-double CMMCore::getXPosition(const char* label) throw (CMMError)
+double CMMCore::getXPosition(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -1678,7 +1678,7 @@ double CMMCore::getXPosition(const char* label) throw (CMMError)
  * @return    the x position
  * @param  label   the stage device label
  */
-double CMMCore::getXPosition() throw (CMMError)
+double CMMCore::getXPosition() noexcept(false)
 {
     return getXPosition(getXYStageDevice().c_str());
 }
@@ -1688,7 +1688,7 @@ double CMMCore::getXPosition() throw (CMMError)
  * @return   the y position
  * @param   label   the stage device label
  */
-double CMMCore::getYPosition(const char* label) throw (CMMError)
+double CMMCore::getYPosition(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -1711,7 +1711,7 @@ double CMMCore::getYPosition(const char* label) throw (CMMError)
  * @return    the y position
  * @param  label   the stage device label
  */
-double CMMCore::getYPosition() throw (CMMError)
+double CMMCore::getYPosition() noexcept(false)
 {
     return getYPosition(getXYStageDevice().c_str());
 }
@@ -1723,7 +1723,7 @@ double CMMCore::getYPosition() throw (CMMError)
  *
  * @param label    the stage device label (either XY or focus/Z stage)
  */
-void CMMCore::stop(const char* label) throw (CMMError)
+void CMMCore::stop(const char* label) noexcept(false)
 {
    std::shared_ptr<DeviceInstance> stage =
       deviceManager_->GetDevice(label);
@@ -1777,7 +1777,7 @@ void CMMCore::stop(const char* label) throw (CMMError)
  *
  * @param label    the stage device label (either XY or focus/Z stage)
  */
-void CMMCore::home(const char* label) throw (CMMError)
+void CMMCore::home(const char* label) noexcept(false)
 {
    std::shared_ptr<DeviceInstance> stage =
       deviceManager_->GetDevice(label);
@@ -1830,7 +1830,7 @@ void CMMCore::home(const char* label) throw (CMMError)
  *
  * @param label    the stage device label
  */
-void CMMCore::setOriginXY(const char* label) throw (CMMError)
+void CMMCore::setOriginXY(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -1852,7 +1852,7 @@ void CMMCore::setOriginXY(const char* label) throw (CMMError)
  * The current position becomes the new origin. Not to be confused with
  * setAdapterOriginXY().
  */
-void CMMCore::setOriginXY() throw (CMMError)
+void CMMCore::setOriginXY() noexcept(false)
 {
     setOriginXY(getXYStageDevice().c_str());
 }
@@ -1864,7 +1864,7 @@ void CMMCore::setOriginXY() throw (CMMError)
  *
  * @param label    the xy stage device label
  */
-void CMMCore::setOriginX(const char* label) throw (CMMError)
+void CMMCore::setOriginX(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -1886,7 +1886,7 @@ void CMMCore::setOriginX(const char* label) throw (CMMError)
  *
  * The current position becomes the new X = 0.
  */
-void CMMCore::setOriginX() throw (CMMError)
+void CMMCore::setOriginX() noexcept(false)
 {
    setOriginX(getXYStageDevice().c_str());
 }
@@ -1898,7 +1898,7 @@ void CMMCore::setOriginX() throw (CMMError)
  *
  * @param label    the xy stage device label
  */
-void CMMCore::setOriginY(const char* label) throw (CMMError)
+void CMMCore::setOriginY(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -1920,7 +1920,7 @@ void CMMCore::setOriginY(const char* label) throw (CMMError)
  *
  * The current position becomes the new Y = 0.
  */
-void CMMCore::setOriginY() throw (CMMError)
+void CMMCore::setOriginY() noexcept(false)
 {
    setOriginY(getXYStageDevice().c_str());
 }
@@ -1933,7 +1933,7 @@ void CMMCore::setOriginY() throw (CMMError)
  *
  * @param label    the stage device label
  */
-void CMMCore::setOrigin(const char* label) throw (CMMError)
+void CMMCore::setOrigin(const char* label) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -1955,7 +1955,7 @@ void CMMCore::setOrigin(const char* label) throw (CMMError)
  * The current position becomes the new origin (Z = 0). Not to be confused with
  * setAdapterOrigin().
  */
-void CMMCore::setOrigin() throw (CMMError)
+void CMMCore::setOrigin() noexcept(false)
 {
     setOrigin(getFocusDevice().c_str());
 }
@@ -1970,7 +1970,7 @@ void CMMCore::setOrigin() throw (CMMError)
  * @param label    the stage device label
  * @param newZUm   the new coordinate to assign to the current Z position
  */
-void CMMCore::setAdapterOrigin(const char* label, double newZUm) throw (CMMError)
+void CMMCore::setAdapterOrigin(const char* label, double newZUm) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -1997,7 +1997,7 @@ void CMMCore::setAdapterOrigin(const char* label, double newZUm) throw (CMMError
  *
  * @param newZUm   the new coordinate to assign to the current Z position
  */
-void CMMCore::setAdapterOrigin(double newZUm) throw (CMMError)
+void CMMCore::setAdapterOrigin(double newZUm) noexcept(false)
 {
     setAdapterOrigin(getFocusDevice().c_str(), newZUm);
 }
@@ -2013,7 +2013,7 @@ void CMMCore::setAdapterOrigin(double newZUm) throw (CMMError)
  * @param newYUm   the new coordinate to assign to the current Y position
  */
 void CMMCore::setAdapterOriginXY(const char* label,
-      double newXUm, double newYUm) throw (CMMError)
+      double newXUm, double newYUm) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pXYStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -2040,7 +2040,7 @@ void CMMCore::setAdapterOriginXY(const char* label,
  * @param newXUm   the new coordinate to assign to the current X position
  * @param newYUm   the new coordinate to assign to the current Y position
  */
-void CMMCore::setAdapterOriginXY(double newXUm, double newYUm) throw (CMMError)
+void CMMCore::setAdapterOriginXY(double newXUm, double newYUm) noexcept(false)
 {
     setAdapterOriginXY(getXYStageDevice().c_str(), newXUm, newYUm);
 }
@@ -2060,7 +2060,7 @@ void CMMCore::setAdapterOriginXY(double newXUm, double newYUm) throw (CMMError)
  * An exception is thrown if the direction has not been set and the device
  * encounters an error when determining the default direction.
  */
-int CMMCore::getFocusDirection(const char* stageLabel) throw (CMMError)
+int CMMCore::getFocusDirection(const char* stageLabel) noexcept(false)
 {
    std::shared_ptr<StageInstance> stage =
       deviceManager_->GetDeviceOfType<StageInstance>(stageLabel);
@@ -2114,7 +2114,7 @@ void CMMCore::setFocusDirection(const char* stageLabel, int sign)
  * @param cameraLabel    the camera device label
  * @return   true if exposure can be sequenced
  */
-bool CMMCore::isExposureSequenceable(const char* cameraLabel) throw (CMMError)
+bool CMMCore::isExposureSequenceable(const char* cameraLabel) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCamera =
       deviceManager_->GetDeviceOfType<CameraInstance>(cameraLabel);
@@ -2135,7 +2135,7 @@ bool CMMCore::isExposureSequenceable(const char* cameraLabel) throw (CMMError)
  * This should only be called for cameras where exposure time is sequenceable
  * @param cameraLabel    the camera device label
  */
-void CMMCore::startExposureSequence(const char* cameraLabel) throw (CMMError)
+void CMMCore::startExposureSequence(const char* cameraLabel) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCamera =
       deviceManager_->GetDeviceOfType<CameraInstance>(cameraLabel);
@@ -2152,7 +2152,7 @@ void CMMCore::startExposureSequence(const char* cameraLabel) throw (CMMError)
  * This should only be called for cameras where exposure time is sequenceable
  * @param cameraLabel   the camera device label
  */
-void CMMCore::stopExposureSequence(const char* cameraLabel) throw (CMMError)
+void CMMCore::stopExposureSequence(const char* cameraLabel) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCamera =
       deviceManager_->GetDeviceOfType<CameraInstance>(cameraLabel);
@@ -2169,7 +2169,7 @@ void CMMCore::stopExposureSequence(const char* cameraLabel) throw (CMMError)
  * This should only be called for cameras where exposure time is sequenceable
  * @param cameraLabel    the camera device label
  */
-long CMMCore::getExposureSequenceMaxLength(const char* cameraLabel) throw (CMMError)
+long CMMCore::getExposureSequenceMaxLength(const char* cameraLabel) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCamera =
       deviceManager_->GetDeviceOfType<CameraInstance>(cameraLabel);
@@ -2189,7 +2189,7 @@ long CMMCore::getExposureSequenceMaxLength(const char* cameraLabel) throw (CMMEr
  * @param cameraLabel      the camera device label
  * @param exposureTime_ms  sequence of exposure times the camera will use during a sequence acquisition
  */
-void CMMCore::loadExposureSequence(const char* cameraLabel, std::vector<double> exposureTime_ms) throw (CMMError)
+void CMMCore::loadExposureSequence(const char* cameraLabel, std::vector<double> exposureTime_ms) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCamera =
       deviceManager_->GetDeviceOfType<CameraInstance>(cameraLabel);
@@ -2227,7 +2227,7 @@ void CMMCore::loadExposureSequence(const char* cameraLabel, std::vector<double>
  * @param label   the stage device label
  * @return   true if the stage can be sequenced
  */
-bool CMMCore::isStageSequenceable(const char* label) throw (CMMError)
+bool CMMCore::isStageSequenceable(const char* label) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -2248,7 +2248,7 @@ bool CMMCore::isStageSequenceable(const char* label) throw (CMMError)
  * @param label   the stage device label
  * @return   true if the stage supports linear sequences
  */
-bool CMMCore::isStageLinearSequenceable(const char* label) throw (CMMError)
+bool CMMCore::isStageLinearSequenceable(const char* label) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -2268,7 +2268,7 @@ bool CMMCore::isStageLinearSequenceable(const char* label) throw (CMMError)
  * This should only be called for stages
  * @param label    the stage device label
  */
-void CMMCore::startStageSequence(const char* label) throw (CMMError)
+void CMMCore::startStageSequence(const char* label) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -2285,7 +2285,7 @@ void CMMCore::startStageSequence(const char* label) throw (CMMError)
  * This should only be called for stages that are sequenceable
  * @param label    the stage device label
  */
-void CMMCore::stopStageSequence(const char* label) throw (CMMError)
+void CMMCore::stopStageSequence(const char* label) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -2303,7 +2303,7 @@ void CMMCore::stopStageSequence(const char* label) throw (CMMError)
  * @param label    the stage device label
  * @return         the maximum length (integer)
  */
-long CMMCore::getStageSequenceMaxLength(const char* label) throw (CMMError)
+long CMMCore::getStageSequenceMaxLength(const char* label) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -2323,7 +2323,7 @@ long CMMCore::getStageSequenceMaxLength(const char* label) throw (CMMError)
  * @param label              the device label
  * @param positionSequence   a sequence of positions that the stage will execute in response to external triggers
  */
-void CMMCore::loadStageSequence(const char* label, std::vector<double> positionSequence) throw (CMMError)
+void CMMCore::loadStageSequence(const char* label, std::vector<double> positionSequence) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(label);
@@ -2357,7 +2357,7 @@ void CMMCore::loadStageSequence(const char* label, std::vector<double> positionS
  *                   Presumably the sequence will repeat after this
  *                   number of TTLs was received
  */
-void CMMCore::setStageLinearSequence(const char* label, double dZ_um, int nSlices) throw (CMMError)
+void CMMCore::setStageLinearSequence(const char* label, double dZ_um, int nSlices) noexcept(false)
 {
    if (nSlices < 0)
       throw CMMError("Linear sequence cannot have negative length");
@@ -2377,7 +2377,7 @@ void CMMCore::setStageLinearSequence(const char* label, double dZ_um, int nSlice
  * Queries XY stage if it can be used in a sequence
  * @param label    the XY stage device label
  */
-bool CMMCore::isXYStageSequenceable(const char* label) throw (CMMError)
+bool CMMCore::isXYStageSequenceable(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -2399,7 +2399,7 @@ bool CMMCore::isXYStageSequenceable(const char* label) throw (CMMError)
  * This should only be called for stages
  * @param label       the XY stage device label
  */
-void CMMCore::startXYStageSequence(const char* label) throw (CMMError)
+void CMMCore::startXYStageSequence(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -2416,7 +2416,7 @@ void CMMCore::startXYStageSequence(const char* label) throw (CMMError)
  * This should only be called for stages that are sequenceable
  * @param label     the XY stage device label
  */
-void CMMCore::stopXYStageSequence(const char* label) throw (CMMError)
+void CMMCore::stopXYStageSequence(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -2434,7 +2434,7 @@ void CMMCore::stopXYStageSequence(const char* label) throw (CMMError)
  * @param label   the XY stage device label
  * @return        the maximum allowed sequence length
  */
-long CMMCore::getXYStageSequenceMaxLength(const char* label) throw (CMMError)
+long CMMCore::getXYStageSequenceMaxLength(const char* label) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -2458,7 +2458,7 @@ long CMMCore::getXYStageSequenceMaxLength(const char* label) throw (CMMError)
  */
 void CMMCore::loadXYStageSequence(const char* label,
                                   std::vector<double> xSequence,
-                                  std::vector<double> ySequence) throw (CMMError)
+                                  std::vector<double> ySequence) noexcept(false)
 {
    std::shared_ptr<XYStageInstance> pStage =
       deviceManager_->GetDeviceOfType<XYStageInstance>(label);
@@ -2489,7 +2489,7 @@ void CMMCore::loadXYStageSequence(const char* label,
  * Acquires a single image with current settings.
  * Snap is not allowed while the acquisition thread is run
  */
-void CMMCore::snapImage() throw (CMMError)
+void CMMCore::snapImage() noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (camera)
@@ -2591,7 +2591,7 @@ bool CMMCore::getAutoShutter()
 * Opens or closes the specified shutter.
 * @param  state     the desired state of the shutter (true for open)
 */
-void CMMCore::setShutterOpen(const char* shutterLabel, bool state) throw (CMMError)
+void CMMCore::setShutterOpen(const char* shutterLabel, bool state) noexcept(false)
 {
    std::shared_ptr<ShutterInstance> pShutter =
       deviceManager_->GetDeviceOfType<ShutterInstance>(shutterLabel);
@@ -2619,7 +2619,7 @@ void CMMCore::setShutterOpen(const char* shutterLabel, bool state) throw (CMMErr
  * Opens or closes the currently selected (default) shutter.
  * @param  state     the desired state of the shutter (true for open)
  */
-void CMMCore::setShutterOpen(bool state) throw (CMMError)
+void CMMCore::setShutterOpen(bool state) noexcept(false)
 {
    std::string shutterLabel = getShutterDevice();
    if (shutterLabel.empty()) return;
@@ -2630,7 +2630,7 @@ void CMMCore::setShutterOpen(bool state) throw (CMMError)
  * Returns the state of the specified shutter.
  * @param  shutterLabel   the name of the shutter
  */
-bool CMMCore::getShutterOpen(const char* shutterLabel) throw (CMMError)
+bool CMMCore::getShutterOpen(const char* shutterLabel) noexcept(false)
 {
    std::shared_ptr<ShutterInstance> pShutter =
       deviceManager_->GetDeviceOfType<ShutterInstance>(shutterLabel);
@@ -2651,7 +2651,7 @@ bool CMMCore::getShutterOpen(const char* shutterLabel) throw (CMMError)
 /**
  * Returns the state of the currently selected (default) shutter.
  */
-bool CMMCore::getShutterOpen() throw (CMMError)
+bool CMMCore::getShutterOpen() noexcept(false)
 {
    std::string shutterLabel = getShutterDevice();
    if (shutterLabel.empty()) return true;
@@ -2679,7 +2679,7 @@ bool CMMCore::getShutterOpen() throw (CMMError)
  * @return a pointer to the internal image buffer.
  * @throws CMMError   when the camera returns no data
  */
-void* CMMCore::getImage() throw (CMMError)
+void* CMMCore::getImage() noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (!camera)
@@ -2745,7 +2745,7 @@ void* CMMCore::getImage() throw (CMMError)
  * @param channelNr   Channel number for which the image buffer is requested
  * @return a pointer to the internal image buffer.
  */
-void* CMMCore::getImage(unsigned channelNr) throw (CMMError)
+void* CMMCore::getImage(unsigned channelNr) noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (!camera)
@@ -2810,7 +2810,7 @@ long CMMCore::getImageBufferSize()
  * @param intervalMs       The interval between images, currently only supported by Andor cameras
  * @param stopOnOverflow   whether or not the camera stops acquiring when the circular buffer is full
  */
-void CMMCore::startSequenceAcquisition(long numImages, double intervalMs, bool stopOnOverflow) throw (CMMError)
+void CMMCore::startSequenceAcquisition(long numImages, double intervalMs, bool stopOnOverflow) noexcept(false)
 {
    // scope for the thread guard
    {
@@ -2864,7 +2864,7 @@ void CMMCore::startSequenceAcquisition(long numImages, double intervalMs, bool s
  * The difference between this method and the one with the same name but operating on the "default"
  * camera is that it does not automatically initialize the circular buffer.
  */
-void CMMCore::startSequenceAcquisition(const char* label, long numImages, double intervalMs, bool stopOnOverflow) throw (CMMError)
+void CMMCore::startSequenceAcquisition(const char* label, long numImages, double intervalMs, bool stopOnOverflow) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCam =
       deviceManager_->GetDeviceOfType<CameraInstance>(label);
@@ -2895,7 +2895,7 @@ void CMMCore::startSequenceAcquisition(const char* label, long numImages, double
  * Prepare the camera for the sequence acquisition to save the time in the
  * StartSequenceAcqusition() call which is supposed to come next.
  */
-void CMMCore::prepareSequenceAcquisition(const char* label) throw (CMMError)
+void CMMCore::prepareSequenceAcquisition(const char* label) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCam =
       deviceManager_->GetDeviceOfType<CameraInstance>(label);
@@ -2919,7 +2919,7 @@ void CMMCore::prepareSequenceAcquisition(const char* label) throw (CMMError)
 /**
  * Initialize circular buffer based on the current camera settings.
  */
-void CMMCore::initializeCircularBuffer() throw (CMMError)
+void CMMCore::initializeCircularBuffer() noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (camera)
@@ -2943,7 +2943,7 @@ void CMMCore::initializeCircularBuffer() throw (CMMError)
  * Stops streaming camera sequence acquisition for a specified camera.
  * @param label   The camera name
  */
-void CMMCore::stopSequenceAcquisition(const char* label) throw (CMMError)
+void CMMCore::stopSequenceAcquisition(const char* label) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCam =
       deviceManager_->GetDeviceOfType<CameraInstance>(label);
@@ -2964,7 +2964,7 @@ void CMMCore::stopSequenceAcquisition(const char* label) throw (CMMError)
  * Starts the continuous camera sequence acquisition.
  * This command does not block the calling thread for the duration of the acquisition.
  */
-void CMMCore::startContinuousSequenceAcquisition(double intervalMs) throw (CMMError)
+void CMMCore::startContinuousSequenceAcquisition(double intervalMs) noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (camera)
@@ -2999,7 +2999,7 @@ void CMMCore::startContinuousSequenceAcquisition(double intervalMs) throw (CMMEr
 /**
  * Stops streaming camera sequence acquisition.
  */
-void CMMCore::stopSequenceAcquisition() throw (CMMError)
+void CMMCore::stopSequenceAcquisition() noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (camera)
@@ -3048,7 +3048,7 @@ bool CMMCore::isSequenceRunning() throw ()
  * Check if the specified camera is acquiring the sequence
  * Returns false when the sequence is done
  */
-bool CMMCore::isSequenceRunning(const char* label) throw (CMMError)
+bool CMMCore::isSequenceRunning(const char* label) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCam =
       deviceManager_->GetDeviceOfType<CameraInstance>(label);
@@ -3061,7 +3061,7 @@ bool CMMCore::isSequenceRunning(const char* label) throw (CMMError)
  * Gets the last image from the circular buffer.
  * Returns 0 if the buffer is empty.
  */
-void* CMMCore::getLastImage() throw (CMMError)
+void* CMMCore::getLastImage() noexcept(false)
 {
 
    // scope for the thread guard
@@ -3088,7 +3088,7 @@ void* CMMCore::getLastImage() throw (CMMError)
    }
 }
 
-void* CMMCore::getLastImageMD(unsigned channel, unsigned slice, Metadata& md) const throw (CMMError)
+void* CMMCore::getLastImageMD(unsigned channel, unsigned slice, Metadata& md) const noexcept(false)
 {
    // Slices have never been implemented on the device interface side
    if (slice != 0)
@@ -3116,7 +3116,7 @@ void* CMMCore::getLastImageMD(unsigned channel, unsigned slice, Metadata& md) co
  * on little endian the format is BGRA888 
  * (see: https://en.wikipedia.org/wiki/RGBA_color_model).
  */
-void* CMMCore::getLastImageMD(Metadata& md) const throw (CMMError)
+void* CMMCore::getLastImageMD(Metadata& md) const noexcept(false)
 {
    return getLastImageMD(0, 0, md);
 }
@@ -3133,7 +3133,7 @@ void* CMMCore::getLastImageMD(Metadata& md) const throw (CMMError)
  * on little endian the format is BGRA888 
  * (see: https://en.wikipedia.org/wiki/RGBA_color_model).
  */
-void* CMMCore::getNBeforeLastImageMD(unsigned long n, Metadata& md) const throw (CMMError)
+void* CMMCore::getNBeforeLastImageMD(unsigned long n, Metadata& md) const noexcept(false)
 {
    const mm::ImgBuffer* pBuf = cbuf_->GetNthFromTopImageBuffer(n);
    if (pBuf != 0)
@@ -3157,7 +3157,7 @@ void* CMMCore::getNBeforeLastImageMD(unsigned long n, Metadata& md) const throw
  * on little endian the format is BGRA888 
  * (see: https://en.wikipedia.org/wiki/RGBA_color_model).
  */
-void* CMMCore::popNextImage() throw (CMMError)
+void* CMMCore::popNextImage() noexcept(false)
 {
    unsigned char* pBuf = const_cast<unsigned char*>(cbuf_->GetNextImage());
    if (pBuf != 0)
@@ -3171,7 +3171,7 @@ void* CMMCore::popNextImage() throw (CMMError)
  * channel indicates which cameraChannel image should be retrieved.
  * slice has not been implement and should always be 0
  */
-void* CMMCore::popNextImageMD(unsigned channel, unsigned slice, Metadata& md) throw (CMMError)
+void* CMMCore::popNextImageMD(unsigned channel, unsigned slice, Metadata& md) noexcept(false)
 {
    // Slices have never been implemented on the device interface side
    if (slice != 0)
@@ -3190,7 +3190,7 @@ void* CMMCore::popNextImageMD(unsigned channel, unsigned slice, Metadata& md) th
 /**
  * Gets and removes the next image (and metadata) from the circular buffer
  */
-void* CMMCore::popNextImageMD(Metadata& md) throw (CMMError)
+void* CMMCore::popNextImageMD(Metadata& md) noexcept(false)
 {
    return popNextImageMD(0, 0, md);
 }
@@ -3201,7 +3201,7 @@ void* CMMCore::popNextImageMD(Metadata& md) throw (CMMError)
  * It is rarely necessary to call this directly since starting a sequence
  * acquisition or changing the ROI will always clear the buffer.
  */
-void CMMCore::clearCircularBuffer() throw (CMMError)
+void CMMCore::clearCircularBuffer() noexcept(false)
 {
    cbuf_->Clear();
 }
@@ -3210,7 +3210,7 @@ void CMMCore::clearCircularBuffer() throw (CMMError)
  * Reserve memory for the circular buffer.
  */
 void CMMCore::setCircularBufferMemoryFootprint(unsigned sizeMB ///< n megabytes
-                                               ) throw (CMMError)
+                                               ) noexcept(false)
 {
    delete cbuf_; // discard old buffer
    LOG_DEBUG(coreLogger_) << "Will set circular buffer size to " <<
@@ -3384,7 +3384,7 @@ std::string CMMCore::getAutoFocusDevice()
 /**
  * Sets the current auto-focus device.
  */
-void CMMCore::setAutoFocusDevice(const char* autofocusLabel) throw (CMMError)
+void CMMCore::setAutoFocusDevice(const char* autofocusLabel) noexcept(false)
 {
    if (autofocusLabel && strlen(autofocusLabel)>0)
    {
@@ -3451,7 +3451,7 @@ std::string CMMCore::getGalvoDevice()
 /**
  * Sets the current image processor device.
  */
-void CMMCore::setImageProcessorDevice(const char* procLabel) throw (CMMError)
+void CMMCore::setImageProcessorDevice(const char* procLabel) noexcept(false)
 {
    if (procLabel && strlen(procLabel)>0)
    {
@@ -3475,7 +3475,7 @@ void CMMCore::setImageProcessorDevice(const char* procLabel) throw (CMMError)
 /**
  * Sets the current slm device.
  */
-void CMMCore::setSLMDevice(const char* slmLabel) throw (CMMError)
+void CMMCore::setSLMDevice(const char* slmLabel) noexcept(false)
 {
    if (slmLabel && strlen(slmLabel)>0)
    {
@@ -3500,7 +3500,7 @@ void CMMCore::setSLMDevice(const char* slmLabel) throw (CMMError)
 /**
  * Sets the current galvo device.
  */
-void CMMCore::setGalvoDevice(const char* galvoLabel) throw (CMMError)
+void CMMCore::setGalvoDevice(const char* galvoLabel) noexcept(false)
 {
    if (galvoLabel && strlen(galvoLabel)>0)
    {
@@ -3524,7 +3524,7 @@ void CMMCore::setGalvoDevice(const char* galvoLabel) throw (CMMError)
 /**
  * Specifies the group determining the channel selection.
  */
-void CMMCore::setChannelGroup(const char* chGroup) throw (CMMError)
+void CMMCore::setChannelGroup(const char* chGroup) noexcept(false)
 {
    // Don't do anything if the new channelgroup is the same as the old one
    if (channelGroup_.compare(chGroup) == 0)
@@ -3565,7 +3565,7 @@ std::string CMMCore::getChannelGroup()
  * Sets the current shutter device.
  * @param shutter    the shutter device label
  */
-void CMMCore::setShutterDevice(const char* shutterLabel) throw (CMMError)
+void CMMCore::setShutterDevice(const char* shutterLabel) noexcept(false)
 {
    if (!shutterLabel || strlen(shutterLabel) > 0) // Allow empty label
       CheckDeviceLabel(shutterLabel);
@@ -3614,7 +3614,7 @@ void CMMCore::setShutterDevice(const char* shutterLabel) throw (CMMError)
  * Sets the current focus device.
  * @param focus    the focus stage device label
  */
-void CMMCore::setFocusDevice(const char* focusLabel) throw (CMMError)
+void CMMCore::setFocusDevice(const char* focusLabel) noexcept(false)
 {
    if (focusLabel && strlen(focusLabel)>0)
    {
@@ -3638,7 +3638,7 @@ void CMMCore::setFocusDevice(const char* focusLabel) throw (CMMError)
 /**
  * Sets the current XY device.
  */
-void CMMCore::setXYStageDevice(const char* xyDeviceLabel) throw (CMMError)
+void CMMCore::setXYStageDevice(const char* xyDeviceLabel) noexcept(false)
 {
    if (xyDeviceLabel && strlen(xyDeviceLabel)>0)
    {
@@ -3662,7 +3662,7 @@ void CMMCore::setXYStageDevice(const char* xyDeviceLabel) throw (CMMError)
  * Sets the current camera device.
  * @param camera   the camera device label
  */
-void CMMCore::setCameraDevice(const char* cameraLabel) throw (CMMError)
+void CMMCore::setCameraDevice(const char* cameraLabel) noexcept(false)
 {
    // If a sequence acquisition is running, the camera cannot be switched. (In
    // order to start sequences for multiple cameras, one must instead use the
@@ -3703,7 +3703,7 @@ void CMMCore::setCameraDevice(const char* cameraLabel) throw (CMMError)
  * @return property name array
  * @param label    the device label
  */
-std::vector<std::string> CMMCore::getDevicePropertyNames(const char* label) throw (CMMError)
+std::vector<std::string> CMMCore::getDevicePropertyNames(const char* label) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return properties_->GetNames();
@@ -3752,7 +3752,7 @@ std::vector<std::string> CMMCore::getLoadedDevicesOfType(MM::DeviceType devType)
  * @param label     the device label
  * @param propName  the property name
  */
-std::vector<std::string> CMMCore::getAllowedPropertyValues(const char* label, const char* propName) throw (CMMError)
+std::vector<std::string> CMMCore::getAllowedPropertyValues(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return properties_->GetAllowedValues(propName);
@@ -3782,7 +3782,7 @@ std::vector<std::string> CMMCore::getAllowedPropertyValues(const char* label, co
  * @param label      the device label
  * @param propName   the property name
  */
-std::string CMMCore::getProperty(const char* label, const char* propName) throw (CMMError)
+std::string CMMCore::getProperty(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return properties_->Get(propName);
@@ -3810,7 +3810,7 @@ std::string CMMCore::getProperty(const char* label, const char* propName) throw
  * @param label       the device label
  * @param propName    the property name
  */
-std::string CMMCore::getPropertyFromCache(const char* label, const char* propName) const throw (CMMError)
+std::string CMMCore::getPropertyFromCache(const char* label, const char* propName) const noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return properties_->Get(propName);
@@ -3836,7 +3836,7 @@ std::string CMMCore::getPropertyFromCache(const char* label, const char* propNam
  * @param propValue   the new property value
  */
 void CMMCore::setProperty(const char* label, const char* propName,
-                          const char* propValue) throw (CMMError)
+                          const char* propValue) noexcept(false)
 {
    CheckDeviceLabel(label);
    CheckPropertyName(propName);
@@ -3879,7 +3879,7 @@ void CMMCore::setProperty(const char* label, const char* propName,
  * @param propValue    the new property value
  */
 void CMMCore::setProperty(const char* label, const char* propName,
-                          const bool propValue) throw (CMMError)
+                          const bool propValue) noexcept(false)
 {
    setProperty(label, propName, (propValue ? "1" : "0"));
 }
@@ -3892,7 +3892,7 @@ void CMMCore::setProperty(const char* label, const char* propName,
  * @param propValue  the new property value
  */
 void CMMCore::setProperty(const char* label, const char* propName,
-                          const long propValue) throw (CMMError)
+                          const long propValue) noexcept(false)
 {
    setProperty(label, propName, ToString(propValue).c_str());
 }
@@ -3905,7 +3905,7 @@ void CMMCore::setProperty(const char* label, const char* propName,
  * @param propValue  the new property value
  */
 void CMMCore::setProperty(const char* label, const char* propName,
-                          const float propValue) throw (CMMError)
+                          const float propValue) noexcept(false)
 {
    setProperty(label, propName, ToString(propValue).c_str());
 }
@@ -3918,7 +3918,7 @@ void CMMCore::setProperty(const char* label, const char* propName,
  * @param propValue      the new property value
  */
 void CMMCore::setProperty(const char* label, const char* propName,
-                          const double propValue) throw (CMMError)
+                          const double propValue) noexcept(false)
 {
    setProperty(label, propName, ToString(propValue).c_str());
 }
@@ -3928,7 +3928,7 @@ void CMMCore::setProperty(const char* label, const char* propName,
  * Checks if device has a property with a specified name.
  * The exception will be thrown in case device label is not defined.
  */
-bool CMMCore::hasProperty(const char* label, const char* propName) throw (CMMError)
+bool CMMCore::hasProperty(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return properties_->Has(propName);
@@ -3946,7 +3946,7 @@ bool CMMCore::hasProperty(const char* label, const char* propName) throw (CMMErr
  * @param label    the device label
  * @param propName the property name
  */
-bool CMMCore::isPropertyReadOnly(const char* label, const char* propName) throw (CMMError)
+bool CMMCore::isPropertyReadOnly(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return properties_->IsReadOnly(propName);
@@ -3964,7 +3964,7 @@ bool CMMCore::isPropertyReadOnly(const char* label, const char* propName) throw
  * @param label      the device label
  * @param propName   the property name
  */
-bool CMMCore::isPropertyPreInit(const char* label, const char* propName) throw (CMMError)
+bool CMMCore::isPropertyPreInit(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return false;
@@ -3978,7 +3978,7 @@ bool CMMCore::isPropertyPreInit(const char* label, const char* propName) throw (
 /**
  * Returns the property lower limit value, if the property has limits - 0 otherwise.
  */
-double CMMCore::getPropertyLowerLimit(const char* label, const char* propName) throw (CMMError)
+double CMMCore::getPropertyLowerLimit(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return 0.0;
@@ -3992,7 +3992,7 @@ double CMMCore::getPropertyLowerLimit(const char* label, const char* propName) t
 /**
  * Returns the property upper limit value, if the property has limits - 0 otherwise.
  */
-double CMMCore::getPropertyUpperLimit(const char* label, const char* propName) throw (CMMError)
+double CMMCore::getPropertyUpperLimit(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return 0.0;
@@ -4008,7 +4008,7 @@ double CMMCore::getPropertyUpperLimit(const char* label, const char* propName) t
  * @param label      the device name
  * @param propName   the property label
  */
-bool CMMCore::hasPropertyLimits(const char* label, const char* propName) throw (CMMError)
+bool CMMCore::hasPropertyLimits(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return false;
@@ -4024,7 +4024,7 @@ bool CMMCore::hasPropertyLimits(const char* label, const char* propName) throw (
  * @param label      the device name
  * @param propName   the property label
  */
-bool CMMCore::isPropertySequenceable(const char* label, const char* propName) throw (CMMError)
+bool CMMCore::isPropertySequenceable(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return false;
@@ -4041,7 +4041,7 @@ bool CMMCore::isPropertySequenceable(const char* label, const char* propName) th
  * @param label      the device name
  * @param propName   the property label
  */
-long CMMCore::getPropertySequenceMaxLength(const char* label, const char* propName) throw (CMMError)
+long CMMCore::getPropertySequenceMaxLength(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       return 0;
@@ -4059,7 +4059,7 @@ long CMMCore::getPropertySequenceMaxLength(const char* label, const char* propNa
  * @param label      the device name
  * @param propName   the property label
  */
-void CMMCore::startPropertySequence(const char* label, const char* propName) throw (CMMError)
+void CMMCore::startPropertySequence(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       // XXX Should be a throw
@@ -4077,7 +4077,7 @@ void CMMCore::startPropertySequence(const char* label, const char* propName) thr
  * @param label     the device label
  * @param propName  the property name
  */
-void CMMCore::stopPropertySequence(const char* label, const char* propName) throw (CMMError)
+void CMMCore::stopPropertySequence(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       // XXX Should be a throw
@@ -4096,7 +4096,7 @@ void CMMCore::stopPropertySequence(const char* label, const char* propName) thro
  * @param propName        the property label
  * @param eventSequence   the sequence of events/states that the device will execute in response to external triggers
  */
-void CMMCore::loadPropertySequence(const char* label, const char* propName, std::vector<std::string> eventSequence) throw (CMMError)
+void CMMCore::loadPropertySequence(const char* label, const char* propName, std::vector<std::string> eventSequence) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       // XXX Should be a throw
@@ -4121,7 +4121,7 @@ void CMMCore::loadPropertySequence(const char* label, const char* propName, std:
 /**
  * Returns the intrinsic property type.
  */
-MM::PropertyType CMMCore::getPropertyType(const char* label, const char* propName) throw (CMMError)
+MM::PropertyType CMMCore::getPropertyType(const char* label, const char* propName) noexcept(false)
 {
    if (IsCoreDeviceLabel(label))
       // TODO: return the proper core type
@@ -4294,7 +4294,7 @@ std::string CMMCore::getCameraChannelName(unsigned int channelNr)
  * Sets the exposure setting of the current camera in milliseconds.
  * @param dExp   the exposure in milliseconds
  */
-void CMMCore::setExposure(double dExp) throw (CMMError)
+void CMMCore::setExposure(double dExp) noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (!camera)
@@ -4317,7 +4317,7 @@ void CMMCore::setExposure(double dExp) throw (CMMError)
  * @param label  the camera device label
  * @param dExp   the exposure in milliseconds
  */
-void CMMCore::setExposure(const char* label, double dExp) throw (CMMError)
+void CMMCore::setExposure(const char* label, double dExp) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCamera =
       deviceManager_->GetDeviceOfType<CameraInstance>(label);
@@ -4347,7 +4347,7 @@ void CMMCore::setExposure(const char* label, double dExp) throw (CMMError)
  * Returns the current exposure setting of the camera in milliseconds.
  * @return the exposure time in milliseconds
  */
-double CMMCore::getExposure() throw (CMMError)
+double CMMCore::getExposure() noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (camera)
@@ -4365,7 +4365,7 @@ double CMMCore::getExposure() throw (CMMError)
 * @param label  the camera device label
 * @return the exposure time in milliseconds
 */
-double CMMCore::getExposure(const char* label) throw (CMMError)
+double CMMCore::getExposure(const char* label) noexcept(false)
 {
   std::shared_ptr<CameraInstance> pCamera =
         deviceManager_->GetDeviceOfType<CameraInstance>(label);
@@ -4395,7 +4395,7 @@ double CMMCore::getExposure(const char* label) throw (CMMError)
  * @param xSize  number of horizontal pixels
  * @param ySize  number of horizontal pixels
  */
-void CMMCore::setROI(int x, int y, int xSize, int ySize) throw (CMMError)
+void CMMCore::setROI(int x, int y, int xSize, int ySize) noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (camera)
@@ -4435,7 +4435,7 @@ void CMMCore::setROI(int x, int y, int xSize, int ySize) throw (CMMError)
  * @param xSize  number of horizontal pixels
  * @param ySize  number of horizontal pixels
  */
-void CMMCore::getROI(int& x, int& y, int& xSize, int& ySize) throw (CMMError)
+void CMMCore::getROI(int& x, int& y, int& xSize, int& ySize) noexcept(false)
 {
    unsigned uX(0), uY(0), uXSize(0), uYSize(0);
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
@@ -4474,7 +4474,7 @@ void CMMCore::getROI(int& x, int& y, int& xSize, int& ySize) throw (CMMError)
 * @param xSize  number of horizontal pixels
 * @param ySize  number of horizontal pixels
 */
-void CMMCore::setROI(const char* label, int x, int y, int xSize, int ySize) throw (CMMError)
+void CMMCore::setROI(const char* label, int x, int y, int xSize, int ySize) noexcept(false)
 {
   std::shared_ptr<CameraInstance> camera = deviceManager_->GetDeviceOfType<CameraInstance>(label);
   if (camera)
@@ -4512,7 +4512,7 @@ void CMMCore::setROI(const char* label, int x, int y, int xSize, int ySize) thro
  * @param xSize  number of horizontal pixels
  * @param ySize  number of vertical pixels
  */
-void CMMCore::getROI(const char* label, int& x, int& y, int& xSize, int& ySize) throw (CMMError)
+void CMMCore::getROI(const char* label, int& x, int& y, int& xSize, int& ySize) noexcept(false)
 {
    std::shared_ptr<CameraInstance> pCam =
       deviceManager_->GetDeviceOfType<CameraInstance>(label);
@@ -4535,7 +4535,7 @@ void CMMCore::getROI(const char* label, int& x, int& y, int& xSize, int& ySize)
  * A successful call to this method will clear any images in the sequence
  * buffer, even if the ROI does not change.
  */
-void CMMCore::clearROI() throw (CMMError)
+void CMMCore::clearROI() noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (camera)
@@ -4557,7 +4557,7 @@ void CMMCore::clearROI() throw (CMMError)
 /**
  * Queries the camera to determine if it supports multiple ROIs.
  */
-bool CMMCore::isMultiROISupported() throw (CMMError)
+bool CMMCore::isMultiROISupported() noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (!camera)
@@ -4571,7 +4571,7 @@ bool CMMCore::isMultiROISupported() throw (CMMError)
 /**
  * Queries the camera to determine if multiple ROIs are currently set.
  */
-bool CMMCore::isMultiROIEnabled() throw (CMMError)
+bool CMMCore::isMultiROIEnabled() noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (!camera)
@@ -4594,7 +4594,7 @@ bool CMMCore::isMultiROIEnabled() throw (CMMError)
  */
 void CMMCore::setMultiROI(std::vector<unsigned> xs, std::vector<unsigned> ys,
       std::vector<unsigned> widths,
-      std::vector<unsigned> heights) throw (CMMError)
+      std::vector<unsigned> heights) noexcept(false)
 {
    if (xs.size() != ys.size() ||
 	   xs.size() != widths.size() ||
@@ -4629,7 +4629,7 @@ void CMMCore::setMultiROI(std::vector<unsigned> xs, std::vector<unsigned> ys,
  */
 void CMMCore::getMultiROI(std::vector<unsigned>& xs, std::vector<unsigned>& ys,
       std::vector<unsigned>& widths,
-      std::vector<unsigned>& heights) throw (CMMError)
+      std::vector<unsigned>& heights) noexcept(false)
 {
    std::shared_ptr<CameraInstance> camera = currentCameraDevice_.lock();
    if (!camera)
@@ -4675,7 +4675,7 @@ void CMMCore::getMultiROI(std::vector<unsigned>& xs, std::vector<unsigned>& ys,
  * @param deviceLabel  the device label
  * @param state        the new state
  */
-void CMMCore::setState(const char* deviceLabel, long state) throw (CMMError)
+void CMMCore::setState(const char* deviceLabel, long state) noexcept(false)
 {
    std::shared_ptr<StateInstance> pStateDev =
       deviceManager_->GetDeviceOfType<StateInstance>(deviceLabel);
@@ -4713,7 +4713,7 @@ void CMMCore::setState(const char* deviceLabel, long state) throw (CMMError)
  * @return                the current state
  * @param deviceLabel     the device label
  */
-long CMMCore::getState(const char* deviceLabel) throw (CMMError)
+long CMMCore::getState(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<StateInstance> pStateDev =
       deviceManager_->GetDeviceOfType<StateInstance>(deviceLabel);
@@ -4754,7 +4754,7 @@ long CMMCore::getNumberOfStates(const char* deviceLabel)
  * @param deviceLabel     the device label
  * @param stateLabel      the state label
  */
-void CMMCore::setStateLabel(const char* deviceLabel, const char* stateLabel) throw (CMMError)
+void CMMCore::setStateLabel(const char* deviceLabel, const char* stateLabel) noexcept(false)
 {
    std::shared_ptr<StateInstance> pStateDev =
       deviceManager_->GetDeviceOfType<StateInstance>(deviceLabel);
@@ -4791,7 +4791,7 @@ void CMMCore::setStateLabel(const char* deviceLabel, const char* stateLabel) thr
  * @return   the current state's label
  * @param deviceLabel     the device label
  */
-std::string CMMCore::getStateLabel(const char* deviceLabel) throw (CMMError)
+std::string CMMCore::getStateLabel(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<StateInstance> pStateDev =
       deviceManager_->GetDeviceOfType<StateInstance>(deviceLabel);
@@ -4807,7 +4807,7 @@ std::string CMMCore::getStateLabel(const char* deviceLabel) throw (CMMError)
  * @param state          the state to be labeled
  * @param label          the label for the specified state
  */
-void CMMCore::defineStateLabel(const char* deviceLabel, long state, const char* label) throw (CMMError)
+void CMMCore::defineStateLabel(const char* deviceLabel, long state, const char* label) noexcept(false)
 {
    std::shared_ptr<StateInstance> pStateDev =
       deviceManager_->GetDeviceOfType<StateInstance>(deviceLabel);
@@ -4868,7 +4868,7 @@ void CMMCore::defineStateLabel(const char* deviceLabel, long state, const char*
  * @return  an array of state labels
  * @param deviceLabel       the device label
  */
-std::vector<std::string> CMMCore::getStateLabels(const char* deviceLabel) throw (CMMError)
+std::vector<std::string> CMMCore::getStateLabels(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<StateInstance> pStateDev =
       deviceManager_->GetDeviceOfType<StateInstance>(deviceLabel);
@@ -4889,7 +4889,7 @@ std::vector<std::string> CMMCore::getStateLabels(const char* deviceLabel) throw
  * @param deviceLabel     the device label
  * @param stateLabel      the label for which the state is being queried
  */
-long CMMCore::getStateFromLabel(const char* deviceLabel, const char* stateLabel) throw (CMMError)
+long CMMCore::getStateFromLabel(const char* deviceLabel, const char* stateLabel) noexcept(false)
 {
    std::shared_ptr<StateInstance> pStateDev =
       deviceManager_->GetDeviceOfType<StateInstance>(deviceLabel);
@@ -4907,7 +4907,7 @@ long CMMCore::getStateFromLabel(const char* deviceLabel, const char* stateLabel)
 /**
  * Creates an empty configuration group.
  */
-void CMMCore::defineConfigGroup(const char* groupName) throw (CMMError)
+void CMMCore::defineConfigGroup(const char* groupName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
 
@@ -4923,7 +4923,7 @@ void CMMCore::defineConfigGroup(const char* groupName) throw (CMMError)
 /**
  * Deletes an entire configuration group.
  */
-void CMMCore::deleteConfigGroup(const char* groupName) throw (CMMError)
+void CMMCore::deleteConfigGroup(const char* groupName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
 
@@ -4942,7 +4942,7 @@ void CMMCore::deleteConfigGroup(const char* groupName) throw (CMMError)
 /**
  * Renames a configuration group.
  */
-void CMMCore::renameConfigGroup(const char* oldGroupName, const char* newGroupName) throw (CMMError)
+void CMMCore::renameConfigGroup(const char* oldGroupName, const char* newGroupName) noexcept(false)
 {
    CheckConfigGroupName(oldGroupName);
    CheckConfigGroupName(newGroupName);
@@ -4967,7 +4967,7 @@ void CMMCore::renameConfigGroup(const char* oldGroupName, const char* newGroupNa
  * @param groupName    the configuration group name
  * @param configName   the configuration preset name
  */
-void CMMCore::defineConfig(const char* groupName, const char* configName) throw (CMMError)
+void CMMCore::defineConfig(const char* groupName, const char* configName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
    CheckConfigPresetName(configName);
@@ -4991,7 +4991,7 @@ void CMMCore::defineConfig(const char* groupName, const char* configName) throw
  * @param propName     the property name
  * @param value        the property value
  */
-void CMMCore::defineConfig(const char* groupName, const char* configName, const char* deviceLabel, const char* propName, const char* value) throw (CMMError)
+void CMMCore::defineConfig(const char* groupName, const char* configName, const char* deviceLabel, const char* propName, const char* value) noexcept(false)
 {
    CheckConfigGroupName(groupName);
    CheckConfigPresetName(configName);
@@ -5022,7 +5022,7 @@ void CMMCore::defineConfig(const char* groupName, const char* configName, const
  * @param propName property name
  * @param value property value
 */
-void CMMCore::definePixelSizeConfig(const char* resolutionID, const char* deviceLabel, const char* propName, const char* value) throw (CMMError)
+void CMMCore::definePixelSizeConfig(const char* resolutionID, const char* deviceLabel, const char* propName, const char* value) noexcept(false)
 {
    CheckConfigPresetName(resolutionID);
    CheckDeviceLabel(deviceLabel);
@@ -5040,7 +5040,7 @@ void CMMCore::definePixelSizeConfig(const char* resolutionID, const char* device
  * Defines an empty pixel size entry.
 */
 
-void CMMCore::definePixelSizeConfig(const char* resolutionID) throw (CMMError)
+void CMMCore::definePixelSizeConfig(const char* resolutionID) noexcept(false)
 {
    CheckConfigPresetName(resolutionID);
 
@@ -5055,7 +5055,7 @@ void CMMCore::definePixelSizeConfig(const char* resolutionID) throw (CMMError)
  *
  * @return true if the configuration is already defined
  */
-bool CMMCore::isPixelSizeConfigDefined(const char* resolutionID) const throw (CMMError)
+bool CMMCore::isPixelSizeConfigDefined(const char* resolutionID) const noexcept(false)
 {
    CheckConfigPresetName(resolutionID);
 
@@ -5065,7 +5065,7 @@ bool CMMCore::isPixelSizeConfigDefined(const char* resolutionID) const throw (CM
 /**
  * Sets pixel size in microns for the specified resolution sensing configuration preset.
  */
-void CMMCore::setPixelSizeUm(const char* resolutionID, double pixSize)  throw (CMMError)
+void CMMCore::setPixelSizeUm(const char* resolutionID, double pixSize)  noexcept(false)
 {
    CheckConfigPresetName(resolutionID);
 
@@ -5089,7 +5089,7 @@ void CMMCore::setPixelSizeUm(const char* resolutionID, double pixSize)  throw (C
  * Order: row[0]col[0] row[0]c[1] row[0]c[2] row[1]c[0] row[1]c[1] row[1]c[2]
  * The given vector has to have 6 doubles, or bad stuff will happen
  */
-void CMMCore::setPixelSizeAffine(const char* resolutionID, std::vector<double> affine)  throw (CMMError)
+void CMMCore::setPixelSizeAffine(const char* resolutionID, std::vector<double> affine)  noexcept(false)
 {
    CheckConfigPresetName(resolutionID);
 
@@ -5120,7 +5120,7 @@ void CMMCore::setPixelSizeAffine(const char* resolutionID, std::vector<double> a
  * @param groupName   the configuration group name
  * @param configName  the configuration preset name
  */
-void CMMCore::setPixelSizeConfig(const char* resolutionID) throw (CMMError)
+void CMMCore::setPixelSizeConfig(const char* resolutionID) noexcept(false)
 {
    CheckConfigPresetName(resolutionID);
 
@@ -5151,7 +5151,7 @@ void CMMCore::setPixelSizeConfig(const char* resolutionID) throw (CMMError)
  * @param groupName   the configuration group name
  * @param configName  the configuration preset name
  */
-void CMMCore::setConfig(const char* groupName, const char* configName) throw (CMMError)
+void CMMCore::setConfig(const char* groupName, const char* configName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
    CheckConfigPresetName(configName);
@@ -5185,7 +5185,7 @@ void CMMCore::setConfig(const char* groupName, const char* configName) throw (CM
  * configuration was not previously defined.
  *
  */
-void CMMCore::renameConfig(const char* groupName, const char* oldConfigName, const char* newConfigName) throw (CMMError)
+void CMMCore::renameConfig(const char* groupName, const char* oldConfigName, const char* newConfigName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
    CheckConfigPresetName(oldConfigName);
@@ -5207,7 +5207,7 @@ void CMMCore::renameConfig(const char* groupName, const char* oldConfigName, con
  * configuration was not previously defined.
  *
  */
-void CMMCore::deleteConfig(const char* groupName, const char* configName) throw (CMMError)
+void CMMCore::deleteConfig(const char* groupName, const char* configName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
    CheckConfigPresetName(configName);
@@ -5230,7 +5230,7 @@ void CMMCore::deleteConfig(const char* groupName, const char* configName) throw
  * configuration was not previously defined.
  *
  */
-void CMMCore::deleteConfig(const char* groupName, const char* configName, const char* deviceLabel, const char* propName) throw (CMMError)
+void CMMCore::deleteConfig(const char* groupName, const char* configName, const char* deviceLabel, const char* propName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
    CheckConfigPresetName(configName);
@@ -5306,7 +5306,7 @@ std::vector<std::string> CMMCore::getAvailablePixelSizeConfigs() const
  *
  * @return The current configuration preset's name
  */
-std::string CMMCore::getCurrentConfig(const char* groupName) throw (CMMError)
+std::string CMMCore::getCurrentConfig(const char* groupName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
 
@@ -5336,7 +5336,7 @@ std::string CMMCore::getCurrentConfig(const char* groupName) throw (CMMError)
  *
  * @return The cache's current configuration preset name
  */
-std::string CMMCore::getCurrentConfigFromCache(const char* groupName) throw (CMMError)
+std::string CMMCore::getCurrentConfigFromCache(const char* groupName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
 
@@ -5362,7 +5362,7 @@ std::string CMMCore::getCurrentConfigFromCache(const char* groupName) throw (CMM
  *
  * @return The configuration object
  */
-Configuration CMMCore::getConfigData(const char* groupName, const char* configName) throw (CMMError)
+Configuration CMMCore::getConfigData(const char* groupName, const char* configName) noexcept(false)
 {
    CheckConfigGroupName(groupName);
    CheckConfigPresetName(configName);
@@ -5386,7 +5386,7 @@ Configuration CMMCore::getConfigData(const char* groupName, const char* configNa
  * Returns the configuration object for a give pixel size preset.
  * @return The configuration object
  */
-Configuration CMMCore::getPixelSizeConfigData(const char* configName) throw (CMMError)
+Configuration CMMCore::getPixelSizeConfigData(const char* configName) noexcept(false)
 {
    CheckConfigPresetName(configName);
 
@@ -5409,7 +5409,7 @@ Configuration CMMCore::getPixelSizeConfigData(const char* configName) throw (CMM
  * configuration was not previously defined.
  *
  */
-void CMMCore::renamePixelSizeConfig(const char* oldConfigName, const char* newConfigName) throw (CMMError)
+void CMMCore::renamePixelSizeConfig(const char* oldConfigName, const char* newConfigName) noexcept(false)
 {
    CheckConfigPresetName(oldConfigName);
    CheckConfigPresetName(newConfigName);
@@ -5430,7 +5430,7 @@ void CMMCore::renamePixelSizeConfig(const char* oldConfigName, const char* newCo
  * configuration was not previously defined.
  *
  */
-void CMMCore::deletePixelSizeConfig(const char* configName) throw (CMMError)
+void CMMCore::deletePixelSizeConfig(const char* configName) noexcept(false)
 {
    CheckConfigPresetName(configName);
 
@@ -5448,7 +5448,7 @@ void CMMCore::deletePixelSizeConfig(const char* configName) throw (CMMError)
 /**
  * Get the current pixel configuration name
  **/
-std::string CMMCore::getCurrentPixelSizeConfig() throw (CMMError)
+std::string CMMCore::getCurrentPixelSizeConfig() noexcept(false)
 {
 	return getCurrentPixelSizeConfig(false);
 }
@@ -5456,7 +5456,7 @@ std::string CMMCore::getCurrentPixelSizeConfig() throw (CMMError)
 /**
  * Get the current pixel configuration name
  **/
-std::string CMMCore::getCurrentPixelSizeConfig(bool cached) throw (CMMError)
+std::string CMMCore::getCurrentPixelSizeConfig(bool cached) noexcept(false)
 {
    // get a list of configuration names
    std::vector<std::string> cfgs = pixelSizeGroup_->GetAvailable();
@@ -5577,7 +5577,7 @@ double CMMCore::getPixelSizeUm(bool cached)
 /**
  * Returns the pixel size in um for the requested pixel size group
  */
-double CMMCore::getPixelSizeUmByID(const char* resolutionID) throw (CMMError)
+double CMMCore::getPixelSizeUmByID(const char* resolutionID) noexcept(false)
 {
    CheckConfigPresetName(resolutionID);
 
@@ -5592,7 +5592,7 @@ double CMMCore::getPixelSizeUmByID(const char* resolutionID) throw (CMMError)
  * Returns the current Affine Transform to related camera pixels with stage movement..
  * This function returns the stored affine transform corrected for binning
  */
-std::vector<double> CMMCore::getPixelSizeAffine() throw (CMMError)
+std::vector<double> CMMCore::getPixelSizeAffine() noexcept(false)
 {
 	 return getPixelSizeAffine(false);
 }
@@ -5602,7 +5602,7 @@ std::vector<double> CMMCore::getPixelSizeAffine() throw (CMMError)
  * This function returns the stored affine transform corrected for binning
  * and known magnification devices
  */
-std::vector<double> CMMCore::getPixelSizeAffine(bool cached) throw (CMMError)
+std::vector<double> CMMCore::getPixelSizeAffine(bool cached) noexcept(false)
 {
    std::string resolutionID = getCurrentPixelSizeConfig(cached);
    if (resolutionID.length() > 0)
@@ -5661,7 +5661,7 @@ std::vector<double> CMMCore::getPixelSizeAffine(bool cached) throw (CMMError)
  * The raw affine transform without correction for binning and magnification
  * will be returned.
  */
-std::vector<double> CMMCore::getPixelSizeAffineByID(const char* resolutionID) throw (CMMError)
+std::vector<double> CMMCore::getPixelSizeAffineByID(const char* resolutionID) noexcept(false)
 {
    CheckConfigPresetName(resolutionID);
 
@@ -5738,7 +5738,7 @@ void CMMCore::setSerialProperties(const char* portName,
                                   const char* delayBetweenCharsMs,
                                   const char* handshaking,
                                   const char* parity,
-                                  const char* stopBits) throw (CMMError)
+                                  const char* stopBits) noexcept(false)
 {
    setProperty(portName, MM::g_Keyword_AnswerTimeout, answerTimeout);
    setProperty(portName, MM::g_Keyword_BaudRate, baudRate);
@@ -5753,7 +5753,7 @@ void CMMCore::setSerialProperties(const char* portName,
  * This command blocks until it receives an answer from the device terminated by the specified
  * sequence.
  */
-void CMMCore::setSerialPortCommand(const char* portLabel, const char* command, const char* term) throw (CMMError)
+void CMMCore::setSerialPortCommand(const char* portLabel, const char* command, const char* term) noexcept(false)
 {
    std::shared_ptr<SerialInstance> pSerial =
       deviceManager_->GetDeviceOfType<SerialInstance>(portLabel);
@@ -5773,7 +5773,7 @@ void CMMCore::setSerialPortCommand(const char* portLabel, const char* command, c
 /**
  * Continuously read from the serial port until the terminating sequence is encountered.
  */
-std::string CMMCore::getSerialPortAnswer(const char* portLabel, const char* term) throw (CMMError)
+std::string CMMCore::getSerialPortAnswer(const char* portLabel, const char* term) noexcept(false)
 {
    std::shared_ptr<SerialInstance> pSerial =
       deviceManager_->GetDeviceOfType<SerialInstance>(portLabel);
@@ -5796,7 +5796,7 @@ std::string CMMCore::getSerialPortAnswer(const char* portLabel, const char* term
 /**
  * Sends an array of characters to the serial port and returns immediately.
  */
-void CMMCore::writeToSerialPort(const char* portLabel, const std::vector<char> &data) throw (CMMError)
+void CMMCore::writeToSerialPort(const char* portLabel, const std::vector<char> &data) noexcept(false)
 {
    std::shared_ptr<SerialInstance> pSerial =
       deviceManager_->GetDeviceOfType<SerialInstance>(portLabel);
@@ -5812,7 +5812,7 @@ void CMMCore::writeToSerialPort(const char* portLabel, const std::vector<char> &
 /**
  * Reads the contents of the Rx buffer.
  */
-std::vector<char> CMMCore::readFromSerialPort(const char* portLabel) throw (CMMError)
+std::vector<char> CMMCore::readFromSerialPort(const char* portLabel) noexcept(false)
 {
    std::shared_ptr<SerialInstance> pSerial =
       deviceManager_->GetDeviceOfType<SerialInstance>(portLabel);
@@ -5839,7 +5839,7 @@ std::vector<char> CMMCore::readFromSerialPort(const char* portLabel) throw (CMME
 /**
  * Write an 8-bit monochrome image to the SLM.
  */
-void CMMCore::setSLMImage(const char* deviceLabel, unsigned char* pixels) throw (CMMError)
+void CMMCore::setSLMImage(const char* deviceLabel, unsigned char* pixels) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5857,7 +5857,7 @@ void CMMCore::setSLMImage(const char* deviceLabel, unsigned char* pixels) throw
 /**
  * Write a 32-bit color image to the SLM.
  */
-void CMMCore::setSLMImage(const char* deviceLabel, imgRGB32 pixels) throw (CMMError)
+void CMMCore::setSLMImage(const char* deviceLabel, imgRGB32 pixels) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5875,7 +5875,7 @@ void CMMCore::setSLMImage(const char* deviceLabel, imgRGB32 pixels) throw (CMMEr
 /**
  * Set all SLM pixels to a single 8-bit intensity.
  */
-void CMMCore::setSLMPixelsTo(const char* deviceLabel, unsigned char intensity) throw (CMMError)
+void CMMCore::setSLMPixelsTo(const char* deviceLabel, unsigned char intensity) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5892,7 +5892,7 @@ void CMMCore::setSLMPixelsTo(const char* deviceLabel, unsigned char intensity) t
 /**
  * Set all SLM pixels to an RGB color.
  */
-void CMMCore::setSLMPixelsTo(const char* deviceLabel, unsigned char red, unsigned char green, unsigned char blue) throw (CMMError)
+void CMMCore::setSLMPixelsTo(const char* deviceLabel, unsigned char red, unsigned char green, unsigned char blue) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5909,7 +5909,7 @@ void CMMCore::setSLMPixelsTo(const char* deviceLabel, unsigned char red, unsigne
 /**
  * Display the waiting image on the SLM.
  */
-void CMMCore::displaySLMImage(const char* deviceLabel) throw (CMMError)
+void CMMCore::displaySLMImage(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5927,7 +5927,7 @@ void CMMCore::displaySLMImage(const char* deviceLabel) throw (CMMError)
  * For SLM devices with build-in light source (such as projectors)
  * this will set the exposure time, but not (yet) start the illumination
  */
-void CMMCore::setSLMExposure(const char* deviceLabel, double exposure_ms) throw (CMMError)
+void CMMCore::setSLMExposure(const char* deviceLabel, double exposure_ms) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5944,7 +5944,7 @@ void CMMCore::setSLMExposure(const char* deviceLabel, double exposure_ms) throw
 /**
  * Returns the exposure time that will be used by the SLM for illumination
  */
-double CMMCore::getSLMExposure(const char* deviceLabel) throw (CMMError)
+double CMMCore::getSLMExposure(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5959,7 +5959,7 @@ double CMMCore::getSLMExposure(const char* deviceLabel) throw (CMMError)
  *
  * @param deviceLabel name of the SLM
  */
-unsigned CMMCore::getSLMWidth(const char* deviceLabel) throw (CMMError)
+unsigned CMMCore::getSLMWidth(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5974,7 +5974,7 @@ unsigned CMMCore::getSLMWidth(const char* deviceLabel) throw (CMMError)
  *
  * @param deviceLabel name of the SLM
  */
-unsigned CMMCore::getSLMHeight(const char* deviceLabel) throw (CMMError)
+unsigned CMMCore::getSLMHeight(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -5989,7 +5989,7 @@ unsigned CMMCore::getSLMHeight(const char* deviceLabel) throw (CMMError)
  *
  * @param deviceLabel name of the SLM
  */
-unsigned CMMCore::getSLMNumberOfComponents(const char* deviceLabel) throw (CMMError)
+unsigned CMMCore::getSLMNumberOfComponents(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -6003,7 +6003,7 @@ unsigned CMMCore::getSLMNumberOfComponents(const char* deviceLabel) throw (CMMEr
  *
  * @param deviceLabel name of the SLM
  */
-unsigned CMMCore::getSLMBytesPerPixel(const char* deviceLabel) throw (CMMError)
+unsigned CMMCore::getSLMBytesPerPixel(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -6018,7 +6018,7 @@ unsigned CMMCore::getSLMBytesPerPixel(const char* deviceLabel) throw (CMMError)
  *
  * @param deviceLabel name of the SLM
  */
-long CMMCore::getSLMSequenceMaxLength(const char* deviceLabel) throw (CMMError)
+long CMMCore::getSLMSequenceMaxLength(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -6036,7 +6036,7 @@ long CMMCore::getSLMSequenceMaxLength(const char* deviceLabel) throw (CMMError)
  *
  * @param deviceLabel name of the SLM
  */
-void CMMCore::startSLMSequence(const char* deviceLabel) throw (CMMError)
+void CMMCore::startSLMSequence(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -6052,7 +6052,7 @@ void CMMCore::startSLMSequence(const char* deviceLabel) throw (CMMError)
  *
  * @param deviceLabel name of the SLM
  */
-void CMMCore::stopSLMSequence(const char* deviceLabel) throw (CMMError)
+void CMMCore::stopSLMSequence(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -6069,7 +6069,7 @@ void CMMCore::stopSLMSequence(const char* deviceLabel) throw (CMMError)
  * @param deviceLabel name of the SLM
  * @param imagesequence pointers to the images to be used in the sequence
  */
-void CMMCore::loadSLMSequence(const char* deviceLabel, std::vector<unsigned char *> imageSequence) throw (CMMError)
+void CMMCore::loadSLMSequence(const char* deviceLabel, std::vector<unsigned char *> imageSequence) noexcept(false)
 {
    std::shared_ptr<SLMInstance> pSLM =
       deviceManager_->GetDeviceOfType<SLMInstance>(deviceLabel);
@@ -6099,7 +6099,7 @@ void CMMCore::loadSLMSequence(const char* deviceLabel, std::vector<unsigned char
 /**
  * Set the Galvo to an x,y position and fire the laser for a predetermined duration.
  */
-void CMMCore::pointGalvoAndFire(const char* deviceLabel, double x, double y, double pulseTime_us) throw (CMMError)
+void CMMCore::pointGalvoAndFire(const char* deviceLabel, double x, double y, double pulseTime_us) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6115,7 +6115,7 @@ void CMMCore::pointGalvoAndFire(const char* deviceLabel, double x, double y, dou
    }
 }
 
-void CMMCore::setGalvoSpotInterval(const char* deviceLabel, double pulseTime_us) throw (CMMError)
+void CMMCore::setGalvoSpotInterval(const char* deviceLabel, double pulseTime_us) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6135,7 +6135,7 @@ void CMMCore::setGalvoSpotInterval(const char* deviceLabel, double pulseTime_us)
 /**
  * Set the Galvo to an x,y position
  */
-void CMMCore::setGalvoPosition(const char* deviceLabel, double x, double y) throw (CMMError)
+void CMMCore::setGalvoPosition(const char* deviceLabel, double x, double y) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6154,7 +6154,7 @@ void CMMCore::setGalvoPosition(const char* deviceLabel, double x, double y) thro
 /**
  * Get the Galvo x,y position
  */
-void CMMCore::getGalvoPosition(const char* deviceLabel, double &x, double &y) throw (CMMError)
+void CMMCore::getGalvoPosition(const char* deviceLabel, double &x, double &y) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6173,7 +6173,7 @@ void CMMCore::getGalvoPosition(const char* deviceLabel, double &x, double &y) th
 /**
  * Set the galvo's illumination state to on or off
  */
-void CMMCore::setGalvoIlluminationState(const char* deviceLabel, bool on) throw (CMMError)
+void CMMCore::setGalvoIlluminationState(const char* deviceLabel, bool on) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6194,7 +6194,7 @@ void CMMCore::setGalvoIlluminationState(const char* deviceLabel, bool on) throw
 /**
  * Get the Galvo x range
  */
-double CMMCore::getGalvoXRange(const char* deviceLabel) throw (CMMError)
+double CMMCore::getGalvoXRange(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6206,7 +6206,7 @@ double CMMCore::getGalvoXRange(const char* deviceLabel) throw (CMMError)
 /**
  * Get the Galvo x minimum
  */
-double CMMCore::getGalvoXMinimum(const char* deviceLabel) throw (CMMError)
+double CMMCore::getGalvoXMinimum(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6218,7 +6218,7 @@ double CMMCore::getGalvoXMinimum(const char* deviceLabel) throw (CMMError)
 /**
  * Get the Galvo y range
  */
-double CMMCore::getGalvoYRange(const char* deviceLabel) throw (CMMError)
+double CMMCore::getGalvoYRange(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6230,7 +6230,7 @@ double CMMCore::getGalvoYRange(const char* deviceLabel) throw (CMMError)
 /**
  * Get the Galvo y minimum
  */
-double CMMCore::getGalvoYMinimum(const char* deviceLabel) throw (CMMError)
+double CMMCore::getGalvoYMinimum(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6242,7 +6242,7 @@ double CMMCore::getGalvoYMinimum(const char* deviceLabel) throw (CMMError)
 /**
  * Add a vertex to a galvo polygon.
  */
-void CMMCore::addGalvoPolygonVertex(const char* deviceLabel, int polygonIndex, double x, double y) throw (CMMError)
+void CMMCore::addGalvoPolygonVertex(const char* deviceLabel, int polygonIndex, double x, double y) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6261,7 +6261,7 @@ void CMMCore::addGalvoPolygonVertex(const char* deviceLabel, int polygonIndex, d
 /**
  * Remove all added polygons
  */
-void CMMCore::deleteGalvoPolygons(const char* deviceLabel) throw (CMMError)
+void CMMCore::deleteGalvoPolygons(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6281,7 +6281,7 @@ void CMMCore::deleteGalvoPolygons(const char* deviceLabel) throw (CMMError)
 /**
  * Load a set of galvo polygons to the device
  */
-void CMMCore::loadGalvoPolygons(const char* deviceLabel) throw (CMMError)
+void CMMCore::loadGalvoPolygons(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6300,7 +6300,7 @@ void CMMCore::loadGalvoPolygons(const char* deviceLabel) throw (CMMError)
 /**
  * Set the number of times to loop galvo polygons
  */
-void CMMCore::setGalvoPolygonRepetitions(const char* deviceLabel, int repetitions) throw (CMMError)
+void CMMCore::setGalvoPolygonRepetitions(const char* deviceLabel, int repetitions) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6320,7 +6320,7 @@ void CMMCore::setGalvoPolygonRepetitions(const char* deviceLabel, int repetition
 /**
  * Run a loop of galvo polygons
  */
-void CMMCore::runGalvoPolygons(const char* deviceLabel) throw (CMMError)
+void CMMCore::runGalvoPolygons(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6339,7 +6339,7 @@ void CMMCore::runGalvoPolygons(const char* deviceLabel) throw (CMMError)
 /**
  * Run a sequence of galvo positions
  */
-void CMMCore::runGalvoSequence(const char* deviceLabel) throw (CMMError)
+void CMMCore::runGalvoSequence(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6358,7 +6358,7 @@ void CMMCore::runGalvoSequence(const char* deviceLabel) throw (CMMError)
 /**
  * Get the name of the active galvo channel (for a multi-laser galvo device).
  */
-std::string CMMCore::getGalvoChannel(const char* deviceLabel) throw (CMMError)
+std::string CMMCore::getGalvoChannel(const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<GalvoInstance> pGalvo =
       deviceManager_->GetDeviceOfType<GalvoInstance>(deviceLabel);
@@ -6375,7 +6375,7 @@ std::string CMMCore::getGalvoChannel(const char* deviceLabel) throw (CMMError)
  * The file records only read-write properties.
  * The file format is directly readable by the complementary loadSystemState() command.
  */
-void CMMCore::saveSystemState(const char* fileName) throw (CMMError)
+void CMMCore::saveSystemState(const char* fileName) noexcept(false)
 {
    if (!fileName)
       throw CMMError("Null filename");
@@ -6409,7 +6409,7 @@ void CMMCore::saveSystemState(const char* fileName) throw (CMMError)
  *
  * Format specification: the same as in loadSystemConfiguration() command
  */
-void CMMCore::loadSystemState(const char* fileName) throw (CMMError)
+void CMMCore::loadSystemState(const char* fileName) noexcept(false)
 {
    if (!fileName)
       throw CMMError("Null filename");
@@ -6482,7 +6482,7 @@ void CMMCore::loadSystemState(const char* fileName) throw (CMMError)
  * setup: devices, labels, pre-initialization properties, and configurations.
  * The file format is the same as for the system state.
  */
-void CMMCore::saveSystemConfiguration(const char* fileName) throw (CMMError)
+void CMMCore::saveSystemConfiguration(const char* fileName) noexcept(false)
 {
    if (!fileName)
       throw CMMError("Null filename");
@@ -6667,7 +6667,7 @@ void CMMCore::saveSystemConfiguration(const char* fileName) throw (CMMError)
  * The number of parameters depends on the actual command used.
  *
  */
-void CMMCore::loadSystemConfiguration(const char* fileName) throw (CMMError)
+void CMMCore::loadSystemConfiguration(const char* fileName) noexcept(false)
 {
    try
    {
@@ -6700,7 +6700,7 @@ void CMMCore::loadSystemConfiguration(const char* fileName) throw (CMMError)
 }
 
 
-void CMMCore::loadSystemConfigurationImpl(const char* fileName) throw (CMMError)
+void CMMCore::loadSystemConfigurationImpl(const char* fileName) noexcept(false)
 {
    if (!fileName)
       throw CMMError("Null filename");
@@ -7005,7 +7005,7 @@ double CMMCore::getCurrentFocusScore()
 /**
  * Enables or disables the operation of the continuous focusing hardware device.
  */
-void CMMCore::enableContinuousFocus(bool enable) throw (CMMError)
+void CMMCore::enableContinuousFocus(bool enable) noexcept(false)
 {
    std::shared_ptr<AutoFocusInstance> autofocus =
       currentAutofocusDevice_.lock();
@@ -7035,7 +7035,7 @@ void CMMCore::enableContinuousFocus(bool enable) throw (CMMError)
 /**
  * Checks if the continuous focusing hardware device is ON or OFF.
  */
-bool CMMCore::isContinuousFocusEnabled() throw (CMMError)
+bool CMMCore::isContinuousFocusEnabled() noexcept(false)
 {
    std::shared_ptr<AutoFocusInstance> autofocus =
       currentAutofocusDevice_.lock();
@@ -7058,7 +7058,7 @@ bool CMMCore::isContinuousFocusEnabled() throw (CMMError)
 /**
 * Returns the lock-in status of the continuous focusing device.
 */
-bool CMMCore::isContinuousFocusLocked() throw (CMMError)
+bool CMMCore::isContinuousFocusLocked() noexcept(false)
 {
    std::shared_ptr<AutoFocusInstance> autofocus =
       currentAutofocusDevice_.lock();
@@ -7076,7 +7076,7 @@ bool CMMCore::isContinuousFocusLocked() throw (CMMError)
 /**
  * Check if a stage has continuous focusing capability (positions can be set while continuous focus runs).
  */
-bool CMMCore::isContinuousFocusDrive(const char* stageLabel) throw (CMMError)
+bool CMMCore::isContinuousFocusDrive(const char* stageLabel) noexcept(false)
 {
    std::shared_ptr<StageInstance> pStage =
       deviceManager_->GetDeviceOfType<StageInstance>(stageLabel);
@@ -7089,7 +7089,7 @@ bool CMMCore::isContinuousFocusDrive(const char* stageLabel) throw (CMMError)
 /**
  * Performs focus acquisition and lock for the one-shot focusing device.
  */
-void CMMCore::fullFocus() throw (CMMError)
+void CMMCore::fullFocus() noexcept(false)
 {
    std::shared_ptr<AutoFocusInstance> autofocus =
       currentAutofocusDevice_.lock();
@@ -7112,7 +7112,7 @@ void CMMCore::fullFocus() throw (CMMError)
 /**
  * Performs incremental focus for the one-shot focusing device.
  */
-void CMMCore::incrementalFocus() throw (CMMError)
+void CMMCore::incrementalFocus() noexcept(false)
 {
    std::shared_ptr<AutoFocusInstance> autofocus =
       currentAutofocusDevice_.lock();
@@ -7136,7 +7136,7 @@ void CMMCore::incrementalFocus() throw (CMMError)
 /**
  * Applies offset the one-shot focusing device.
  */
-void CMMCore::setAutoFocusOffset(double offset) throw (CMMError)
+void CMMCore::setAutoFocusOffset(double offset) noexcept(false)
 {
    std::shared_ptr<AutoFocusInstance> autofocus =
       currentAutofocusDevice_.lock();
@@ -7159,7 +7159,7 @@ void CMMCore::setAutoFocusOffset(double offset) throw (CMMError)
 /**
  * Measures offset for the one-shot focusing device.
  */
-double CMMCore::getAutoFocusOffset() throw (CMMError)
+double CMMCore::getAutoFocusOffset() noexcept(false)
 {
    std::shared_ptr<AutoFocusInstance> autofocus =
       currentAutofocusDevice_.lock();
@@ -7312,7 +7312,7 @@ static bool ContainsForbiddenCharacters(const std::string& str)
    return (std::string::npos != str.find_first_of(MM::g_FieldDelimiters));
 }
 
-void CMMCore::CheckDeviceLabel(const char* label) throw (CMMError)
+void CMMCore::CheckDeviceLabel(const char* label) noexcept(false)
 {
    if (!label)
       throw CMMError("Null device label", MMERR_NullPointerException);
@@ -7323,7 +7323,7 @@ void CMMCore::CheckDeviceLabel(const char* label) throw (CMMError)
             MMERR_InvalidContents);
 }
 
-void CMMCore::CheckPropertyName(const char* propName) throw (CMMError)
+void CMMCore::CheckPropertyName(const char* propName) noexcept(false)
 {
    if (!propName)
       throw CMMError("Null property name", MMERR_NullPointerException);
@@ -7332,7 +7332,7 @@ void CMMCore::CheckPropertyName(const char* propName) throw (CMMError)
             MMERR_InvalidContents);
 }
 
-void CMMCore::CheckPropertyValue(const char* value) throw (CMMError)
+void CMMCore::CheckPropertyValue(const char* value) noexcept(false)
 {
    if (!value)
       throw CMMError("Null property value", MMERR_NullPointerException);
@@ -7341,7 +7341,7 @@ void CMMCore::CheckPropertyValue(const char* value) throw (CMMError)
             MMERR_InvalidContents);
 }
 
-void CMMCore::CheckStateLabel(const char* stateLabel) throw (CMMError)
+void CMMCore::CheckStateLabel(const char* stateLabel) noexcept(false)
 {
    if (!stateLabel)
       throw CMMError("Null state label", MMERR_NullPointerException);
@@ -7350,7 +7350,7 @@ void CMMCore::CheckStateLabel(const char* stateLabel) throw (CMMError)
             MMERR_InvalidContents);
 }
 
-void CMMCore::CheckConfigGroupName(const char* groupName) throw (CMMError)
+void CMMCore::CheckConfigGroupName(const char* groupName) noexcept(false)
 {
    if (!groupName)
       throw CMMError("Null configuration group name", MMERR_NullPointerException);
@@ -7359,7 +7359,7 @@ void CMMCore::CheckConfigGroupName(const char* groupName) throw (CMMError)
             MMERR_InvalidContents);
 }
 
-void CMMCore::CheckConfigPresetName(const char* presetName) throw (CMMError)
+void CMMCore::CheckConfigPresetName(const char* presetName) noexcept(false)
 {
    if (!presetName)
       throw CMMError("Null configuration preset name", MMERR_NullPointerException);
@@ -7372,7 +7372,7 @@ void CMMCore::CheckConfigPresetName(const char* presetName) throw (CMMError)
             MMERR_BadConfigName);
 }
 
-bool CMMCore::IsCoreDeviceLabel(const char* label) const throw (CMMError)
+bool CMMCore::IsCoreDeviceLabel(const char* label) const noexcept(false)
 {
    if (!label)
       throw CMMError("Null device label", MMERR_NullPointerException);
@@ -7385,7 +7385,7 @@ bool CMMCore::IsCoreDeviceLabel(const char* label) const throw (CMMError)
  * until all success or no more change takes place
  * If errors remain, throw an error
  */
-void CMMCore::applyConfiguration(const Configuration& config) throw (CMMError)
+void CMMCore::applyConfiguration(const Configuration& config) noexcept(false)
 {
    std::ostringstream sall;
    bool error = false;
@@ -7682,7 +7682,7 @@ MM::DeviceDetectionStatus CMMCore::detectDevice(const char* label)
  *
  * @param hubDeviceLabel    the label for the device of type Hub
  */
-std::vector<std::string> CMMCore::getInstalledDevices(const char* hubDeviceLabel) throw (CMMError)
+std::vector<std::string> CMMCore::getInstalledDevices(const char* hubDeviceLabel) noexcept(false)
 {
    std::shared_ptr<HubInstance> pHub =
       deviceManager_->GetDeviceOfType<HubInstance>(hubDeviceLabel);
@@ -7691,13 +7691,13 @@ std::vector<std::string> CMMCore::getInstalledDevices(const char* hubDeviceLabel
    return pHub->GetInstalledPeripheralNames();
 }
 
-std::vector<std::string> CMMCore::getLoadedPeripheralDevices(const char* hubLabel) throw (CMMError)
+std::vector<std::string> CMMCore::getLoadedPeripheralDevices(const char* hubLabel) noexcept(false)
 {
    CheckDeviceLabel(hubLabel);
    return deviceManager_->GetLoadedPeripherals(hubLabel);
 }
 
-std::string CMMCore::getInstalledDeviceDescription(const char* hubLabel, const char* deviceLabel) throw (CMMError)
+std::string CMMCore::getInstalledDeviceDescription(const char* hubLabel, const char* deviceLabel) noexcept(false)
 {
    std::shared_ptr<HubInstance> pHub =
       deviceManager_->GetDeviceOfType<HubInstance>(hubLabel);
diff --git a/MMCore/MMCore.h b/MMCore/MMCore.h
index 83d67b0b..cd3bdcd8 100644
--- a/MMCore/MMCore.h
+++ b/MMCore/MMCore.h
@@ -150,24 +150,24 @@ public:
 
    /** \name Core feature control. */
    ///@{
-   static void enableFeature(const char* name, bool enable) throw (CMMError);
-   static bool isFeatureEnabled(const char* name) throw (CMMError);
+   static void enableFeature(const char* name, bool enable) noexcept(false);
+   static bool isFeatureEnabled(const char* name) noexcept(false);
    ///@}
 
    /** \name Initialization and setup. */
    ///@{
    void loadDevice(const char* label, const char* moduleName,
-         const char* deviceName) throw (CMMError);
-   void unloadDevice(const char* label) throw (CMMError);
-   void unloadAllDevices() throw (CMMError);
-   void initializeAllDevices() throw (CMMError);
-   void initializeDevice(const char* label) throw (CMMError);
-   DeviceInitializationState getDeviceInitializationState(const char* label) const throw (CMMError);
-   void reset() throw (CMMError);
+         const char* deviceName) noexcept(false);
+   void unloadDevice(const char* label) noexcept(false);
+   void unloadAllDevices() noexcept(false);
+   void initializeAllDevices() noexcept(false);
+   void initializeDevice(const char* label) noexcept(false);
+   DeviceInitializationState getDeviceInitializationState(const char* label) const noexcept(false);
+   void reset() noexcept(false);
 
-   void unloadLibrary(const char* moduleName) throw (CMMError);
+   void unloadLibrary(const char* moduleName) noexcept(false);
 
-   void updateCoreProperties() throw (CMMError);
+   void updateCoreProperties() noexcept(false);
 
    std::string getCoreErrorText(int code) const;
 
@@ -175,18 +175,18 @@ public:
    std::string getAPIVersionInfo() const;
    Configuration getSystemState();
    void setSystemState(const Configuration& conf);
-   Configuration getConfigState(const char* group, const char* config) throw (CMMError);
-   Configuration getConfigGroupState(const char* group) throw (CMMError);
-   void saveSystemState(const char* fileName) throw (CMMError);
-   void loadSystemState(const char* fileName) throw (CMMError);
-   void saveSystemConfiguration(const char* fileName) throw (CMMError);
-   void loadSystemConfiguration(const char* fileName) throw (CMMError);
+   Configuration getConfigState(const char* group, const char* config) noexcept(false);
+   Configuration getConfigGroupState(const char* group) noexcept(false);
+   void saveSystemState(const char* fileName) noexcept(false);
+   void loadSystemState(const char* fileName) noexcept(false);
+   void saveSystemConfiguration(const char* fileName) noexcept(false);
+   void loadSystemConfiguration(const char* fileName) noexcept(false);
    void registerCallback(MMEventCallback* cb);
    ///@}
 
    /** \name Logging and log management. */
    ///@{
-   void setPrimaryLogFile(const char* filename, bool truncate = false) throw (CMMError);
+   void setPrimaryLogFile(const char* filename, bool truncate = false) noexcept(false);
    std::string getPrimaryLogFile() const;
 
    void logMessage(const char* msg);
@@ -197,8 +197,8 @@ public:
    bool stderrLogEnabled();
 
    int startSecondaryLogFile(const char* filename, bool enableDebug,
-         bool truncate = true, bool synchronous = false) throw (CMMError);
-   void stopSecondaryLogFile(int handle) throw (CMMError);
+         bool truncate = true, bool synchronous = false) noexcept(false);
+   void stopSecondaryLogFile(int handle) noexcept(false);
 
    ///@}
 
@@ -207,11 +207,11 @@ public:
    std::vector<std::string> getDeviceAdapterSearchPaths();
    void setDeviceAdapterSearchPaths(const std::vector<std::string>& paths);
 
-   std::vector<std::string> getDeviceAdapterNames() throw (CMMError);
+   std::vector<std::string> getDeviceAdapterNames() noexcept(false);
 
-   std::vector<std::string> getAvailableDevices(const char* library) throw (CMMError);
-   std::vector<std::string> getAvailableDeviceDescriptions(const char* library) throw (CMMError);
-   std::vector<long> getAvailableDeviceTypes(const char* library) throw (CMMError);
+   std::vector<std::string> getAvailableDevices(const char* library) noexcept(false);
+   std::vector<std::string> getAvailableDeviceDescriptions(const char* library) noexcept(false);
+   std::vector<long> getAvailableDeviceTypes(const char* library) noexcept(false);
    ///@}
 
    /** \name Generic device control.
@@ -221,45 +221,45 @@ public:
    ///@{
    std::vector<std::string> getLoadedDevices() const;
    std::vector<std::string> getLoadedDevicesOfType(MM::DeviceType devType) const;
-   MM::DeviceType getDeviceType(const char* label) throw (CMMError);
-   std::string getDeviceLibrary(const char* label) throw (CMMError);
-   std::string getDeviceName(const char* label) throw (CMMError);
-   std::string getDeviceDescription(const char* label) throw (CMMError);
-
-   std::vector<std::string> getDevicePropertyNames(const char* label) throw (CMMError);
-   bool hasProperty(const char* label, const char* propName) throw (CMMError);
-   std::string getProperty(const char* label, const char* propName) throw (CMMError);
-   void setProperty(const char* label, const char* propName, const char* propValue) throw (CMMError);
-   void setProperty(const char* label, const char* propName, const bool propValue) throw (CMMError);
-   void setProperty(const char* label, const char* propName, const long propValue) throw (CMMError);
-   void setProperty(const char* label, const char* propName, const float propValue) throw (CMMError);
-   void setProperty(const char* label, const char* propName, const double propValue) throw (CMMError);
-
-   std::vector<std::string> getAllowedPropertyValues(const char* label, const char* propName) throw (CMMError);
-   bool isPropertyReadOnly(const char* label, const char* propName) throw (CMMError);
-   bool isPropertyPreInit(const char* label, const char* propName) throw (CMMError);
-   bool isPropertySequenceable(const char* label, const char* propName) throw (CMMError);
-   bool hasPropertyLimits(const char* label, const char* propName) throw (CMMError);
-   double getPropertyLowerLimit(const char* label, const char* propName) throw (CMMError);
-   double getPropertyUpperLimit(const char* label, const char* propName) throw (CMMError);
-   MM::PropertyType getPropertyType(const char* label, const char* propName) throw (CMMError);
-
-   void startPropertySequence(const char* label, const char* propName) throw (CMMError);
-   void stopPropertySequence(const char* label, const char* propName) throw (CMMError);
-   long getPropertySequenceMaxLength(const char* label, const char* propName) throw (CMMError);
-   void loadPropertySequence(const char* label, const char* propName, std::vector<std::string> eventSequence) throw (CMMError);
-
-   bool deviceBusy(const char* label) throw (CMMError);
-   void waitForDevice(const char* label) throw (CMMError);
-   void waitForConfig(const char* group, const char* configName) throw (CMMError);
-   bool systemBusy() throw (CMMError);
-   void waitForSystem() throw (CMMError);
-   bool deviceTypeBusy(MM::DeviceType devType) throw (CMMError);
-   void waitForDeviceType(MM::DeviceType devType) throw (CMMError);
-
-   double getDeviceDelayMs(const char* label) throw (CMMError);
-   void setDeviceDelayMs(const char* label, double delayMs) throw (CMMError);
-   bool usesDeviceDelay(const char* label) throw (CMMError);
+   MM::DeviceType getDeviceType(const char* label) noexcept(false);
+   std::string getDeviceLibrary(const char* label) noexcept(false);
+   std::string getDeviceName(const char* label) noexcept(false);
+   std::string getDeviceDescription(const char* label) noexcept(false);
+
+   std::vector<std::string> getDevicePropertyNames(const char* label) noexcept(false);
+   bool hasProperty(const char* label, const char* propName) noexcept(false);
+   std::string getProperty(const char* label, const char* propName) noexcept(false);
+   void setProperty(const char* label, const char* propName, const char* propValue) noexcept(false);
+   void setProperty(const char* label, const char* propName, const bool propValue) noexcept(false);
+   void setProperty(const char* label, const char* propName, const long propValue) noexcept(false);
+   void setProperty(const char* label, const char* propName, const float propValue) noexcept(false);
+   void setProperty(const char* label, const char* propName, const double propValue) noexcept(false);
+
+   std::vector<std::string> getAllowedPropertyValues(const char* label, const char* propName) noexcept(false);
+   bool isPropertyReadOnly(const char* label, const char* propName) noexcept(false);
+   bool isPropertyPreInit(const char* label, const char* propName) noexcept(false);
+   bool isPropertySequenceable(const char* label, const char* propName) noexcept(false);
+   bool hasPropertyLimits(const char* label, const char* propName) noexcept(false);
+   double getPropertyLowerLimit(const char* label, const char* propName) noexcept(false);
+   double getPropertyUpperLimit(const char* label, const char* propName) noexcept(false);
+   MM::PropertyType getPropertyType(const char* label, const char* propName) noexcept(false);
+
+   void startPropertySequence(const char* label, const char* propName) noexcept(false);
+   void stopPropertySequence(const char* label, const char* propName) noexcept(false);
+   long getPropertySequenceMaxLength(const char* label, const char* propName) noexcept(false);
+   void loadPropertySequence(const char* label, const char* propName, std::vector<std::string> eventSequence) noexcept(false);
+
+   bool deviceBusy(const char* label) noexcept(false);
+   void waitForDevice(const char* label) noexcept(false);
+   void waitForConfig(const char* group, const char* configName) noexcept(false);
+   bool systemBusy() noexcept(false);
+   void waitForSystem() noexcept(false);
+   bool deviceTypeBusy(MM::DeviceType devType) noexcept(false);
+   void waitForDeviceType(MM::DeviceType devType) noexcept(false);
+
+   double getDeviceDelayMs(const char* label) noexcept(false);
+   void setDeviceDelayMs(const char* label, double delayMs) noexcept(false);
+   bool usesDeviceDelay(const char* label) noexcept(false);
 
    void setTimeoutMs(long timeoutMs) {if (timeoutMs > 0) timeoutMs_ = timeoutMs;}
    long getTimeoutMs() { return timeoutMs_;}
@@ -278,15 +278,15 @@ public:
    std::string getSLMDevice();
    std::string getGalvoDevice();
    std::string getChannelGroup();
-   void setCameraDevice(const char* cameraLabel) throw (CMMError);
-   void setShutterDevice(const char* shutterLabel) throw (CMMError);
-   void setFocusDevice(const char* focusLabel) throw (CMMError);
-   void setXYStageDevice(const char* xyStageLabel) throw (CMMError);
-   void setAutoFocusDevice(const char* focusLabel) throw (CMMError);
-   void setImageProcessorDevice(const char* procLabel) throw (CMMError);
-   void setSLMDevice(const char* slmLabel) throw (CMMError);
-   void setGalvoDevice(const char* galvoLabel) throw (CMMError);
-   void setChannelGroup(const char* channelGroup) throw (CMMError);
+   void setCameraDevice(const char* cameraLabel) noexcept(false);
+   void setShutterDevice(const char* shutterLabel) noexcept(false);
+   void setFocusDevice(const char* focusLabel) noexcept(false);
+   void setXYStageDevice(const char* xyStageLabel) noexcept(false);
+   void setAutoFocusDevice(const char* focusLabel) noexcept(false);
+   void setImageProcessorDevice(const char* procLabel) noexcept(false);
+   void setSLMDevice(const char* slmLabel) noexcept(false);
+   void setGalvoDevice(const char* galvoLabel) noexcept(false);
+   void setChannelGroup(const char* channelGroup) noexcept(false);
    ///@}
 
    /** \name System state cache.
@@ -298,87 +298,87 @@ public:
    Configuration getSystemStateCache() const;
    void updateSystemStateCache();
    std::string getPropertyFromCache(const char* deviceLabel,
-         const char* propName) const throw (CMMError);
-   std::string getCurrentConfigFromCache(const char* groupName) throw (CMMError);
-   Configuration getConfigGroupStateFromCache(const char* group) throw (CMMError);
+         const char* propName) const noexcept(false);
+   std::string getCurrentConfigFromCache(const char* groupName) noexcept(false);
+   Configuration getConfigGroupStateFromCache(const char* group) noexcept(false);
    ///@}
 
    /** \name Configuration groups. */
    ///@{
-   void defineConfig(const char* groupName, const char* configName) throw (CMMError);
+   void defineConfig(const char* groupName, const char* configName) noexcept(false);
    void defineConfig(const char* groupName, const char* configName,
          const char* deviceLabel, const char* propName,
-         const char* value) throw (CMMError);
-   void defineConfigGroup(const char* groupName) throw (CMMError);
-   void deleteConfigGroup(const char* groupName) throw (CMMError);
+         const char* value) noexcept(false);
+   void defineConfigGroup(const char* groupName) noexcept(false);
+   void deleteConfigGroup(const char* groupName) noexcept(false);
    void renameConfigGroup(const char* oldGroupName,
-         const char* newGroupName) throw (CMMError);
+         const char* newGroupName) noexcept(false);
    bool isGroupDefined(const char* groupName);
    bool isConfigDefined(const char* groupName, const char* configName);
-   void setConfig(const char* groupName, const char* configName) throw (CMMError);
-   void deleteConfig(const char* groupName, const char* configName) throw (CMMError);
+   void setConfig(const char* groupName, const char* configName) noexcept(false);
+   void deleteConfig(const char* groupName, const char* configName) noexcept(false);
    void deleteConfig(const char* groupName, const char* configName,
-         const char* deviceLabel, const char* propName) throw (CMMError);
+         const char* deviceLabel, const char* propName) noexcept(false);
    void renameConfig(const char* groupName, const char* oldConfigName,
-         const char* newConfigName) throw (CMMError);
+         const char* newConfigName) noexcept(false);
    std::vector<std::string> getAvailableConfigGroups() const;
    std::vector<std::string> getAvailableConfigs(const char* configGroup) const;
-   std::string getCurrentConfig(const char* groupName) throw (CMMError);
+   std::string getCurrentConfig(const char* groupName) noexcept(false);
    Configuration getConfigData(const char* configGroup,
-         const char* configName) throw (CMMError);
+         const char* configName) noexcept(false);
    ///@}
 
    /** \name The pixel size configuration group. */
    ///@{
-   std::string getCurrentPixelSizeConfig() throw (CMMError);
-   std::string getCurrentPixelSizeConfig(bool cached) throw (CMMError);
+   std::string getCurrentPixelSizeConfig() noexcept(false);
+   std::string getCurrentPixelSizeConfig(bool cached) noexcept(false);
    double getPixelSizeUm();
    double getPixelSizeUm(bool cached);
-   double getPixelSizeUmByID(const char* resolutionID) throw (CMMError);
-   std::vector<double> getPixelSizeAffine() throw (CMMError);
-   std::vector<double> getPixelSizeAffine(bool cached) throw (CMMError);
-   std::vector<double> getPixelSizeAffineByID(const char* resolutionID) throw (CMMError);
+   double getPixelSizeUmByID(const char* resolutionID) noexcept(false);
+   std::vector<double> getPixelSizeAffine() noexcept(false);
+   std::vector<double> getPixelSizeAffine(bool cached) noexcept(false);
+   std::vector<double> getPixelSizeAffineByID(const char* resolutionID) noexcept(false);
    double getMagnificationFactor() const;
-   void setPixelSizeUm(const char* resolutionID, double pixSize)  throw (CMMError);
-   void setPixelSizeAffine(const char* resolutionID, std::vector<double> affine)  throw (CMMError);
+   void setPixelSizeUm(const char* resolutionID, double pixSize)  noexcept(false);
+   void setPixelSizeAffine(const char* resolutionID, std::vector<double> affine)  noexcept(false);
    void definePixelSizeConfig(const char* resolutionID,
          const char* deviceLabel, const char* propName,
-         const char* value) throw (CMMError);
-   void definePixelSizeConfig(const char* resolutionID) throw (CMMError);
+         const char* value) noexcept(false);
+   void definePixelSizeConfig(const char* resolutionID) noexcept(false);
    std::vector<std::string> getAvailablePixelSizeConfigs() const;
-   bool isPixelSizeConfigDefined(const char* resolutionID) const throw (CMMError);
-   void setPixelSizeConfig(const char* resolutionID) throw (CMMError);
+   bool isPixelSizeConfigDefined(const char* resolutionID) const noexcept(false);
+   void setPixelSizeConfig(const char* resolutionID) noexcept(false);
    void renamePixelSizeConfig(const char* oldConfigName,
-         const char* newConfigName) throw (CMMError);
-   void deletePixelSizeConfig(const char* configName) throw (CMMError);
-   Configuration getPixelSizeConfigData(const char* configName) throw (CMMError);
+         const char* newConfigName) noexcept(false);
+   void deletePixelSizeConfig(const char* configName) noexcept(false);
+   Configuration getPixelSizeConfigData(const char* configName) noexcept(false);
    ///@}
 
    /** \name Image acquisition. */
    ///@{
-   void setROI(int x, int y, int xSize, int ySize) throw (CMMError);
-   void setROI(const char* label, int x, int y, int xSize, int ySize) throw (CMMError);
-   void getROI(int& x, int& y, int& xSize, int& ySize) throw (CMMError);
-   void getROI(const char* label, int& x, int& y, int& xSize, int& ySize) throw (CMMError);
-   void clearROI() throw (CMMError);
-
-   bool isMultiROISupported() throw (CMMError);
-   bool isMultiROIEnabled() throw (CMMError);
+   void setROI(int x, int y, int xSize, int ySize) noexcept(false);
+   void setROI(const char* label, int x, int y, int xSize, int ySize) noexcept(false);
+   void getROI(int& x, int& y, int& xSize, int& ySize) noexcept(false);
+   void getROI(const char* label, int& x, int& y, int& xSize, int& ySize) noexcept(false);
+   void clearROI() noexcept(false);
+
+   bool isMultiROISupported() noexcept(false);
+   bool isMultiROIEnabled() noexcept(false);
    void setMultiROI(std::vector<unsigned> xs, std::vector<unsigned> ys,
            std::vector<unsigned> widths,
-           std::vector<unsigned> heights) throw (CMMError);
+           std::vector<unsigned> heights) noexcept(false);
    void getMultiROI(std::vector<unsigned>& xs, std::vector<unsigned>& ys,
            std::vector<unsigned>& widths,
-           std::vector<unsigned>& heights) throw (CMMError);
+           std::vector<unsigned>& heights) noexcept(false);
 
-   void setExposure(double exp) throw (CMMError);
-   void setExposure(const char* cameraLabel, double dExp) throw (CMMError);
-   double getExposure() throw (CMMError);
-   double getExposure(const char* label) throw (CMMError);
+   void setExposure(double exp) noexcept(false);
+   void setExposure(const char* cameraLabel, double dExp) noexcept(false);
+   double getExposure() noexcept(false);
+   double getExposure(const char* label) noexcept(false);
 
-   void snapImage() throw (CMMError);
-   void* getImage() throw (CMMError);
-   void* getImage(unsigned numChannel) throw (CMMError);
+   void snapImage() noexcept(false);
+   void* getImage() noexcept(false);
+   void* getImage(unsigned numChannel) noexcept(false);
 
    unsigned getImageWidth();
    unsigned getImageHeight();
@@ -391,140 +391,140 @@ public:
 
    void setAutoShutter(bool state);
    bool getAutoShutter();
-   void setShutterOpen(bool state) throw (CMMError);
-   bool getShutterOpen() throw (CMMError);
-   void setShutterOpen(const char* shutterLabel, bool state) throw (CMMError);
-   bool getShutterOpen(const char* shutterLabel) throw (CMMError);
+   void setShutterOpen(bool state) noexcept(false);
+   bool getShutterOpen() noexcept(false);
+   void setShutterOpen(const char* shutterLabel, bool state) noexcept(false);
+   bool getShutterOpen(const char* shutterLabel) noexcept(false);
 
    void startSequenceAcquisition(long numImages, double intervalMs,
-         bool stopOnOverflow) throw (CMMError);
+         bool stopOnOverflow) noexcept(false);
    void startSequenceAcquisition(const char* cameraLabel, long numImages,
-         double intervalMs, bool stopOnOverflow) throw (CMMError);
-   void prepareSequenceAcquisition(const char* cameraLabel) throw (CMMError);
-   void startContinuousSequenceAcquisition(double intervalMs) throw (CMMError);
-   void stopSequenceAcquisition() throw (CMMError);
-   void stopSequenceAcquisition(const char* cameraLabel) throw (CMMError);
+         double intervalMs, bool stopOnOverflow) noexcept(false);
+   void prepareSequenceAcquisition(const char* cameraLabel) noexcept(false);
+   void startContinuousSequenceAcquisition(double intervalMs) noexcept(false);
+   void stopSequenceAcquisition() noexcept(false);
+   void stopSequenceAcquisition(const char* cameraLabel) noexcept(false);
    bool isSequenceRunning() throw ();
-   bool isSequenceRunning(const char* cameraLabel) throw (CMMError);
+   bool isSequenceRunning(const char* cameraLabel) noexcept(false);
 
-   void* getLastImage() throw (CMMError);
-   void* popNextImage() throw (CMMError);
+   void* getLastImage() noexcept(false);
+   void* popNextImage() noexcept(false);
    void* getLastImageMD(unsigned channel, unsigned slice, Metadata& md)
-      const throw (CMMError);
+      const noexcept(false);
    void* popNextImageMD(unsigned channel, unsigned slice, Metadata& md)
-      throw (CMMError);
-   void* getLastImageMD(Metadata& md) const throw (CMMError);
+      noexcept(false);
+   void* getLastImageMD(Metadata& md) const noexcept(false);
    void* getNBeforeLastImageMD(unsigned long n, Metadata& md)
-      const throw (CMMError);
-   void* popNextImageMD(Metadata& md) throw (CMMError);
+      const noexcept(false);
+   void* popNextImageMD(Metadata& md) noexcept(false);
 
    long getRemainingImageCount();
    long getBufferTotalCapacity();
    long getBufferFreeCapacity();
    bool isBufferOverflowed() const;
-   void setCircularBufferMemoryFootprint(unsigned sizeMB) throw (CMMError);
+   void setCircularBufferMemoryFootprint(unsigned sizeMB) noexcept(false);
    unsigned getCircularBufferMemoryFootprint();
-   void initializeCircularBuffer() throw (CMMError);
-   void clearCircularBuffer() throw (CMMError);
+   void initializeCircularBuffer() noexcept(false);
+   void clearCircularBuffer() noexcept(false);
 
-   bool isExposureSequenceable(const char* cameraLabel) throw (CMMError);
-   void startExposureSequence(const char* cameraLabel) throw (CMMError);
-   void stopExposureSequence(const char* cameraLabel) throw (CMMError);
-   long getExposureSequenceMaxLength(const char* cameraLabel) throw (CMMError);
+   bool isExposureSequenceable(const char* cameraLabel) noexcept(false);
+   void startExposureSequence(const char* cameraLabel) noexcept(false);
+   void stopExposureSequence(const char* cameraLabel) noexcept(false);
+   long getExposureSequenceMaxLength(const char* cameraLabel) noexcept(false);
    void loadExposureSequence(const char* cameraLabel,
-         std::vector<double> exposureSequence_ms) throw (CMMError);
+         std::vector<double> exposureSequence_ms) noexcept(false);
    ///@}
 
    /** \name Autofocus control. */
    ///@{
    double getLastFocusScore();
    double getCurrentFocusScore();
-   void enableContinuousFocus(bool enable) throw (CMMError);
-   bool isContinuousFocusEnabled() throw (CMMError);
-   bool isContinuousFocusLocked() throw (CMMError);
-   bool isContinuousFocusDrive(const char* stageLabel) throw (CMMError);
-   void fullFocus() throw (CMMError);
-   void incrementalFocus() throw (CMMError);
-   void setAutoFocusOffset(double offset) throw (CMMError);
-   double getAutoFocusOffset() throw (CMMError);
+   void enableContinuousFocus(bool enable) noexcept(false);
+   bool isContinuousFocusEnabled() noexcept(false);
+   bool isContinuousFocusLocked() noexcept(false);
+   bool isContinuousFocusDrive(const char* stageLabel) noexcept(false);
+   void fullFocus() noexcept(false);
+   void incrementalFocus() noexcept(false);
+   void setAutoFocusOffset(double offset) noexcept(false);
+   double getAutoFocusOffset() noexcept(false);
    ///@}
 
    /** \name State device control. */
    ///@{
-   void setState(const char* stateDeviceLabel, long state) throw (CMMError);
-   long getState(const char* stateDeviceLabel) throw (CMMError);
+   void setState(const char* stateDeviceLabel, long state) noexcept(false);
+   long getState(const char* stateDeviceLabel) noexcept(false);
    long getNumberOfStates(const char* stateDeviceLabel);
    void setStateLabel(const char* stateDeviceLabel,
-         const char* stateLabel) throw (CMMError);
-   std::string getStateLabel(const char* stateDeviceLabel) throw (CMMError);
+         const char* stateLabel) noexcept(false);
+   std::string getStateLabel(const char* stateDeviceLabel) noexcept(false);
    void defineStateLabel(const char* stateDeviceLabel,
-         long state, const char* stateLabel) throw (CMMError);
+         long state, const char* stateLabel) noexcept(false);
    std::vector<std::string> getStateLabels(const char* stateDeviceLabel)
-      throw (CMMError);
+      noexcept(false);
    long getStateFromLabel(const char* stateDeviceLabel,
-         const char* stateLabel) throw (CMMError);
+         const char* stateLabel) noexcept(false);
    ///@}
 
    /** \name Focus (Z) stage control. */
    ///@{
-   void setPosition(const char* stageLabel, double position) throw (CMMError);
-   void setPosition(double position) throw (CMMError);
-   double getPosition(const char* stageLabel) throw (CMMError);
-   double getPosition() throw (CMMError);
-   void setRelativePosition(const char* stageLabel, double d) throw (CMMError);
-   void setRelativePosition(double d) throw (CMMError);
-   void setOrigin(const char* stageLabel) throw (CMMError);
-   void setOrigin() throw (CMMError);
-   void setAdapterOrigin(const char* stageLabel, double newZUm) throw (CMMError);
-   void setAdapterOrigin(double newZUm) throw (CMMError);
+   void setPosition(const char* stageLabel, double position) noexcept(false);
+   void setPosition(double position) noexcept(false);
+   double getPosition(const char* stageLabel) noexcept(false);
+   double getPosition() noexcept(false);
+   void setRelativePosition(const char* stageLabel, double d) noexcept(false);
+   void setRelativePosition(double d) noexcept(false);
+   void setOrigin(const char* stageLabel) noexcept(false);
+   void setOrigin() noexcept(false);
+   void setAdapterOrigin(const char* stageLabel, double newZUm) noexcept(false);
+   void setAdapterOrigin(double newZUm) noexcept(false);
 
    void setFocusDirection(const char* stageLabel, int sign);
-   int getFocusDirection(const char* stageLabel) throw (CMMError);
+   int getFocusDirection(const char* stageLabel) noexcept(false);
 
-   bool isStageSequenceable(const char* stageLabel) throw (CMMError);
-   bool isStageLinearSequenceable(const char* stageLabel) throw (CMMError);
-   void startStageSequence(const char* stageLabel) throw (CMMError);
-   void stopStageSequence(const char* stageLabel) throw (CMMError);
-   long getStageSequenceMaxLength(const char* stageLabel) throw (CMMError);
+   bool isStageSequenceable(const char* stageLabel) noexcept(false);
+   bool isStageLinearSequenceable(const char* stageLabel) noexcept(false);
+   void startStageSequence(const char* stageLabel) noexcept(false);
+   void stopStageSequence(const char* stageLabel) noexcept(false);
+   long getStageSequenceMaxLength(const char* stageLabel) noexcept(false);
    void loadStageSequence(const char* stageLabel,
-         std::vector<double> positionSequence) throw (CMMError);
-   void setStageLinearSequence(const char* stageLabel, double dZ_um, int nSlices) throw (CMMError);
+         std::vector<double> positionSequence) noexcept(false);
+   void setStageLinearSequence(const char* stageLabel, double dZ_um, int nSlices) noexcept(false);
    ///@}
 
    /** \name XY stage control. */
    ///@{
    void setXYPosition(const char* xyStageLabel,
-         double x, double y) throw (CMMError);
-   void setXYPosition(double x, double y) throw (CMMError);
+         double x, double y) noexcept(false);
+   void setXYPosition(double x, double y) noexcept(false);
    void setRelativeXYPosition(const char* xyStageLabel,
-         double dx, double dy) throw (CMMError);
-   void setRelativeXYPosition(double dx, double dy) throw (CMMError);
+         double dx, double dy) noexcept(false);
+   void setRelativeXYPosition(double dx, double dy) noexcept(false);
    void getXYPosition(const char* xyStageLabel,
-         double &x_stage, double &y_stage) throw (CMMError);
-   void getXYPosition(double &x_stage, double &y_stage) throw (CMMError);
-   double getXPosition(const char* xyStageLabel) throw (CMMError);
-   double getYPosition(const char* xyStageLabel) throw (CMMError);
-   double getXPosition() throw (CMMError);
-   double getYPosition() throw (CMMError);
-   void stop(const char* xyOrZStageLabel) throw (CMMError);
-   void home(const char* xyOrZStageLabel) throw (CMMError);
-   void setOriginXY(const char* xyStageLabel) throw (CMMError);
-   void setOriginXY() throw (CMMError);
-   void setOriginX(const char* xyStageLabel) throw (CMMError);
-   void setOriginX() throw (CMMError);
-   void setOriginY(const char* xyStageLabel) throw (CMMError);
-   void setOriginY() throw (CMMError);
+         double &x_stage, double &y_stage) noexcept(false);
+   void getXYPosition(double &x_stage, double &y_stage) noexcept(false);
+   double getXPosition(const char* xyStageLabel) noexcept(false);
+   double getYPosition(const char* xyStageLabel) noexcept(false);
+   double getXPosition() noexcept(false);
+   double getYPosition() noexcept(false);
+   void stop(const char* xyOrZStageLabel) noexcept(false);
+   void home(const char* xyOrZStageLabel) noexcept(false);
+   void setOriginXY(const char* xyStageLabel) noexcept(false);
+   void setOriginXY() noexcept(false);
+   void setOriginX(const char* xyStageLabel) noexcept(false);
+   void setOriginX() noexcept(false);
+   void setOriginY(const char* xyStageLabel) noexcept(false);
+   void setOriginY() noexcept(false);
    void setAdapterOriginXY(const char* xyStageLabel,
-         double newXUm, double newYUm) throw (CMMError);
-   void setAdapterOriginXY(double newXUm, double newYUm) throw (CMMError);
+         double newXUm, double newYUm) noexcept(false);
+   void setAdapterOriginXY(double newXUm, double newYUm) noexcept(false);
 
-   bool isXYStageSequenceable(const char* xyStageLabel) throw (CMMError);
-   void startXYStageSequence(const char* xyStageLabel) throw (CMMError);
-   void stopXYStageSequence(const char* xyStageLabel) throw (CMMError);
-   long getXYStageSequenceMaxLength(const char* xyStageLabel) throw (CMMError);
+   bool isXYStageSequenceable(const char* xyStageLabel) noexcept(false);
+   void startXYStageSequence(const char* xyStageLabel) noexcept(false);
+   void stopXYStageSequence(const char* xyStageLabel) noexcept(false);
+   long getXYStageSequenceMaxLength(const char* xyStageLabel) noexcept(false);
    void loadXYStageSequence(const char* xyStageLabel,
          std::vector<double> xSequence,
-         std::vector<double> ySequence) throw (CMMError);
+         std::vector<double> ySequence) noexcept(false);
    ///@}
 
    /** \name Serial port control. */
@@ -535,16 +535,16 @@ public:
       const char* delayBetweenCharsMs,
       const char* handshaking,
       const char* parity,
-      const char* stopBits) throw (CMMError);
+      const char* stopBits) noexcept(false);
 
    void setSerialPortCommand(const char* portLabel, const char* command,
-         const char* term) throw (CMMError);
+         const char* term) noexcept(false);
    std::string getSerialPortAnswer(const char* portLabel,
-         const char* term) throw (CMMError);
+         const char* term) noexcept(false);
    void writeToSerialPort(const char* portLabel,
-         const std::vector<char> &data) throw (CMMError);
+         const std::vector<char> &data) noexcept(false);
    std::vector<char> readFromSerialPort(const char* portLabel)
-      throw (CMMError);
+      noexcept(false);
    ///@}
 
    /** \name SLM control.
@@ -554,27 +554,27 @@ public:
     */
    ///@{
    void setSLMImage(const char* slmLabel,
-         unsigned char * pixels) throw (CMMError);
-   void setSLMImage(const char* slmLabel, imgRGB32 pixels) throw (CMMError);
+         unsigned char * pixels) noexcept(false);
+   void setSLMImage(const char* slmLabel, imgRGB32 pixels) noexcept(false);
    void setSLMPixelsTo(const char* slmLabel,
-         unsigned char intensity) throw (CMMError);
+         unsigned char intensity) noexcept(false);
    void setSLMPixelsTo(const char* slmLabel,
          unsigned char red, unsigned char green,
-         unsigned char blue) throw (CMMError);
-   void displaySLMImage(const char* slmLabel) throw (CMMError);
+         unsigned char blue) noexcept(false);
+   void displaySLMImage(const char* slmLabel) noexcept(false);
    void setSLMExposure(const char* slmLabel, double exposure_ms)
-      throw (CMMError);
-   double getSLMExposure(const char* slmLabel) throw (CMMError);
-   unsigned getSLMWidth(const char* slmLabel) throw (CMMError);
-   unsigned getSLMHeight(const char* slmLabel) throw (CMMError);
-   unsigned getSLMNumberOfComponents(const char* slmLabel) throw (CMMError);
-   unsigned getSLMBytesPerPixel(const char* slmLabel) throw (CMMError);
-
-   long getSLMSequenceMaxLength(const char* slmLabel) throw (CMMError);
-   void startSLMSequence(const char* slmLabel) throw (CMMError);
-   void stopSLMSequence(const char* slmLabel) throw (CMMError);
+      noexcept(false);
+   double getSLMExposure(const char* slmLabel) noexcept(false);
+   unsigned getSLMWidth(const char* slmLabel) noexcept(false);
+   unsigned getSLMHeight(const char* slmLabel) noexcept(false);
+   unsigned getSLMNumberOfComponents(const char* slmLabel) noexcept(false);
+   unsigned getSLMBytesPerPixel(const char* slmLabel) noexcept(false);
+
+   long getSLMSequenceMaxLength(const char* slmLabel) noexcept(false);
+   void startSLMSequence(const char* slmLabel) noexcept(false);
+   void stopSLMSequence(const char* slmLabel) noexcept(false);
    void loadSLMSequence(const char* slmLabel,
-         std::vector<unsigned char*> imageSequence) throw (CMMError);
+         std::vector<unsigned char*> imageSequence) noexcept(false);
    ///@}
 
    /** \name Galvo control.
@@ -583,28 +583,28 @@ public:
     */
    ///@{
    void pointGalvoAndFire(const char* galvoLabel, double x, double y,
-         double pulseTime_us) throw (CMMError);
+         double pulseTime_us) noexcept(false);
    void setGalvoSpotInterval(const char* galvoLabel,
-         double pulseTime_us) throw (CMMError);
+         double pulseTime_us) noexcept(false);
    void setGalvoPosition(const char* galvoLabel, double x, double y)
-      throw (CMMError);
+      noexcept(false);
    void getGalvoPosition(const char* galvoLabel,
-         double &x_stage, double &y_stage) throw (CMMError); // using x_stage to get swig to work
+         double &x_stage, double &y_stage) noexcept(false); // using x_stage to get swig to work
    void setGalvoIlluminationState(const char* galvoLabel, bool on)
-      throw (CMMError);
-   double getGalvoXRange(const char* galvoLabel) throw (CMMError);
-   double getGalvoXMinimum(const char* galvoLabel) throw (CMMError);
-   double getGalvoYRange(const char* galvoLabel) throw (CMMError);
-   double getGalvoYMinimum(const char* galvoLabel) throw (CMMError);
+      noexcept(false);
+   double getGalvoXRange(const char* galvoLabel) noexcept(false);
+   double getGalvoXMinimum(const char* galvoLabel) noexcept(false);
+   double getGalvoYRange(const char* galvoLabel) noexcept(false);
+   double getGalvoYMinimum(const char* galvoLabel) noexcept(false);
    void addGalvoPolygonVertex(const char* galvoLabel, int polygonIndex,
-         double x, double y) throw (CMMError);
-   void deleteGalvoPolygons(const char* galvoLabel) throw (CMMError);
-   void loadGalvoPolygons(const char* galvoLabel) throw (CMMError);
+         double x, double y) noexcept(false);
+   void deleteGalvoPolygons(const char* galvoLabel) noexcept(false);
+   void loadGalvoPolygons(const char* galvoLabel) noexcept(false);
    void setGalvoPolygonRepetitions(const char* galvoLabel, int repetitions)
-      throw (CMMError);
-   void runGalvoPolygons(const char* galvoLabel) throw (CMMError);
-   void runGalvoSequence(const char* galvoLabel) throw (CMMError);
-   std::string getGalvoChannel(const char* galvoLabel) throw (CMMError);
+      noexcept(false);
+   void runGalvoPolygons(const char* galvoLabel) noexcept(false);
+   void runGalvoSequence(const char* galvoLabel) noexcept(false);
+   std::string getGalvoChannel(const char* galvoLabel) noexcept(false);
    ///@}
 
    /** \name Device discovery. */
@@ -615,14 +615,14 @@ public:
 
    /** \name Hub and peripheral devices. */
    ///@{
-   std::string getParentLabel(const char* peripheralLabel) throw (CMMError);
+   std::string getParentLabel(const char* peripheralLabel) noexcept(false);
    void setParentLabel(const char* deviceLabel,
-         const char* parentHubLabel) throw (CMMError);
+         const char* parentHubLabel) noexcept(false);
 
-   std::vector<std::string> getInstalledDevices(const char* hubLabel) throw (CMMError);
+   std::vector<std::string> getInstalledDevices(const char* hubLabel) noexcept(false);
    std::string getInstalledDeviceDescription(const char* hubLabel,
-         const char* peripheralLabel) throw (CMMError);
-   std::vector<std::string> getLoadedPeripheralDevices(const char* hubLabel) throw (CMMError);
+         const char* peripheralLabel) noexcept(false);
+   std::vector<std::string> getLoadedPeripheralDevices(const char* hubLabel) noexcept(false);
    ///@}
 
 private:
@@ -677,27 +677,27 @@ private:
    void CreateCoreProperties();
 
    // Parameter/value validation
-   static void CheckDeviceLabel(const char* label) throw (CMMError);
-   static void CheckPropertyName(const char* propName) throw (CMMError);
-   static void CheckPropertyValue(const char* propValue) throw (CMMError);
-   static void CheckStateLabel(const char* stateLabel) throw (CMMError);
-   static void CheckConfigGroupName(const char* groupName) throw (CMMError);
-   static void CheckConfigPresetName(const char* presetName) throw (CMMError);
-   bool IsCoreDeviceLabel(const char* label) const throw (CMMError);
-
-   void applyConfiguration(const Configuration& config) throw (CMMError);
+   static void CheckDeviceLabel(const char* label) noexcept(false);
+   static void CheckPropertyName(const char* propName) noexcept(false);
+   static void CheckPropertyValue(const char* propValue) noexcept(false);
+   static void CheckStateLabel(const char* stateLabel) noexcept(false);
+   static void CheckConfigGroupName(const char* groupName) noexcept(false);
+   static void CheckConfigPresetName(const char* presetName) noexcept(false);
+   bool IsCoreDeviceLabel(const char* label) const noexcept(false);
+
+   void applyConfiguration(const Configuration& config) noexcept(false);
    int applyProperties(std::vector<PropertySetting>& props, std::string& lastError);
-   void waitForDevice(std::shared_ptr<DeviceInstance> pDev) throw (CMMError);
-   Configuration getConfigGroupState(const char* group, bool fromCache) throw (CMMError);
+   void waitForDevice(std::shared_ptr<DeviceInstance> pDev) noexcept(false);
+   Configuration getConfigGroupState(const char* group, bool fromCache) noexcept(false);
    std::string getDeviceErrorText(int deviceCode, std::shared_ptr<DeviceInstance> pDevice);
    std::string getDeviceName(std::shared_ptr<DeviceInstance> pDev);
    void logError(const char* device, const char* msg);
    void updateAllowedChannelGroups();
    void assignDefaultRole(std::shared_ptr<DeviceInstance> pDev);
-   void updateCoreProperty(const char* propName, MM::DeviceType devType) throw (CMMError);
-   void loadSystemConfigurationImpl(const char* fileName) throw (CMMError);
-   void initializeAllDevicesSerial() throw (CMMError);
-   void initializeAllDevicesParallel() throw (CMMError);
+   void updateCoreProperty(const char* propName, MM::DeviceType devType) noexcept(false);
+   void loadSystemConfigurationImpl(const char* fileName) noexcept(false);
+   void initializeAllDevicesSerial() noexcept(false);
+   void initializeAllDevicesParallel() noexcept(false);
    int initializeVectorOfDevices(std::vector<std::pair<std::shared_ptr<DeviceInstance>, std::string> > pDevices);
 };
 
